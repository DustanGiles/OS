{"entries":[{"timestamp":1743383763063,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.py","patch":[{"start1":1006,"length1":57,"diffs":[[1,""]]},{"start1":1277,"length1":19,"diffs":[[1,""]]},{"start1":1278,"length1":1,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":1211,"length1":70,"diffs":[[1,""]]},{"start1":1503,"length1":19,"diffs":[[1,""]]}]}]},{"timestamp":1743384311650,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":709,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"pyprj\"\n"]]}]}]},{"timestamp":1743384633160,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13,"length1":72,"diffs":[[1,"    x: number\n    y: number\n    text: TextSprite\n    width: number\n"]]},{"start1":200,"length1":399,"diffs":[[1,"        //  Coordinates and text parameters\n        this.x = x\n        this.y = y\n        this.text = textsprite.create(text)\n        //  Assuming textsprite.create() returns a text sprite object\n        //  Setting text height, outline, and position\n        this.text.setMaxFontHeight(height)\n        this.text.setOutline(border_width, border)\n        this.text.setPosition(x, y)\n        //  Storing width of the text sprite\n        this.width = this.text.width\n"]]},{"start1":669,"length1":1,"diffs":[[1,"    \n"]]},{"start1":725,"length1":37,"diffs":[[1,"        this.text.setPosition(x, y)\n"]]},{"start1":767,"length1":1,"diffs":[[1,"    \n"]]},{"start1":800,"length1":28,"diffs":[[1,"        return this.text.x\n"]]},{"start1":833,"length1":1,"diffs":[[1,"    \n"]]},{"start1":866,"length1":28,"diffs":[[1,"        return this.text.y\n"]]},{"start1":899,"length1":0,"diffs":[[1,"    \n"]]},{"start1":920,"length1":78,"diffs":[[1,"    menu_items: any[]\n"]]},{"start1":977,"length1":205,"diffs":[[1,"        let cursor = [scene.screenWidth() / 2, 10]\n        this.menu_items = []\n"]]},{"start1":1091,"length1":155,"diffs":[[1,"            this.menu_items.push(new Text(cursor[0], cursor[1], item))\n            cursor[1] += 10\n"]]},{"start1":1206,"length1":105,"diffs":[[1,"    \n    public returnMenu(): any[] {\n        return menu_items\n"]]},{"start1":1276,"length1":0,"diffs":[[1,"    \n"]]},{"start1":1284,"length1":286,"diffs":[[1,"let pic = image.create(scene.screenWidth(), scene.screenHeight())\npic.fillRect(0, 0, scene.screenWidth(), scene.screenHeight(), 16)\nscene.setBackgroundImage(pic)\nlet menu_items = []\n"]]},{"start1":1497,"length1":87,"diffs":[[1,"    menu_items.push(\"Option \" + (\"\" + i))\n"]]},{"start1":1541,"length1":175,"diffs":[[1,"let menu = new Menu(menu_items)\nmenu.menu_items[1]\n"]]}]}]},{"timestamp":1743385218988,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1975,"length1":10,"diffs":[[1,""]]},{"start1":2040,"length1":303,"diffs":[[1,"menu.menu_items[1].width\n"]]}]}]},{"timestamp":1743385796555,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":85,"length1":136,"diffs":[[1,"    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, border_width: number = 0) {\n"]]},{"start1":334,"length1":56,"diffs":[[1,"        // Setting text height, outline, and position\n"]]},{"start1":521,"length1":24,"diffs":[[1,"\n"]]},{"start1":1975,"length1":10,"diffs":[[1,"let a = 6\n"]]},{"start1":2352,"length1":25,"diffs":[[1,"\n"]]}]}]},{"timestamp":1743386343290,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":8235,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"NxH38mzU+U%~-sI?HgLx\">pic</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"function createText(x: number, y: number, text: string, height: number = 1, border: number = 1, border_width: number = 0) {\" line1=\"    let text_sprite = textsprite.create(text)\" line2=\"    text_sprite.setMaxFontHeight(height)\" line3=\"    text_sprite.setOutline(border_width, border)\" line4=\"    text_sprite.setPosition(text_sprite.width / 2 + x, text_sprite.height / 2 + y)\" line5=\"}\" numlines=\"6\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"NxH38mzU+U%~-sI?HgLx\">pic</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"scenescreenwidth\"></block></value><value name=\"height\"><block type=\"scenescreenheight\"></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NxH38mzU+U%~-sI?HgLx\">pic</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"scenescreenwidth\"></block></value><value name=\"h\"><block type=\"scenescreenheight\"></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NxH38mzU+U%~-sI?HgLx\">pic</field></block></value><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"createText(10, 20, &quot;This is Text&quot;)\" numlines=\"1\"></mutation></block></next></block></next></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":76,"diffs":[[1,""]]},{"start1":85,"length1":135,"diffs":[[1,"    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, border_width: number = 0, z: number = 10) {\n"]]},{"start1":350,"length1":59,"diffs":[[1,"        // Setting text height, outline, Z and position\n"]]},{"start1":450,"length1":51,"diffs":[[1,"        this.text.setOutline(border_width, border);\n"]]},{"start1":539,"length1":72,"diffs":[[1,"        this.text.z = z\n        // Storing width of the text sprite\n"]]},{"start1":652,"length1":92,"diffs":[[1,"    public setTextPosition(x: number, y: number) {\n"]]},{"start1":747,"length1":27,"diffs":[[1,""]]},{"start1":888,"length1":75,"diffs":[[1,"    menu_items: Text[];  // Declaring menu_items as an array of Text objects\n"]]},{"start1":1001,"length1":152,"diffs":[[1,"        let cursor = [scene.screenWidth() / 2, 10];\n        this.menu_items = [];  // Initializing the menu_items array\n"]]},{"start1":1122,"length1":84,"diffs":[[1,"        // Creating a new Text object for each item and positioning them vertically\n"]]},{"start1":1240,"length1":150,"diffs":[[1,"            this.menu_items.push(new Text(cursor[0], cursor[1], item));\n            cursor[1] += 10;  // Adjusting the vertical position for the next item\n"]]},{"start1":1412,"length1":39,"diffs":[[1,"    // Returning the menu items array\n"]]},{"start1":1484,"length1":31,"diffs":[[1,"        return this.menu_items;\n"]]},{"start1":1611,"length1":89,"diffs":[[1,"pic.fillRect(0, 0, scene.screenWidth(), scene.screenHeight(), 16);\n"]]},{"start1":1710,"length1":120,"diffs":[[1,"// Correctly initializing the menu_items array with a list of strings\nlet menu_items: string[] = [];\nfor (let i = 0; i < 10; i++) {\n    menu_items.push(\"Option \" + (i + 1));  // Using a 1-based index for better display\n"]]},{"start1":1932,"length1":32,"diffs":[[1,"// Creating a new Menu object with the menu items\nlet menu = new Menu(menu_items);\n"]]},{"start1":2016,"length1":0,"diffs":[[1,"let a = 0\n"]]},{"start1":2091,"length1":305,"diffs":[[1,"let box = image.create(menu.menu_items[a].text.width, menu.menu_items[a].text.height);\nbox.fillRect(0, 0, menu.menu_items[a].text.width, menu.menu_items[a].text.height, 7);\nlet mySprite = sprites.create(box, SpriteKind.Player)\nmySprite.setPosition(menu.menu_items[a].text.x, menu.menu_items[a].text.y)\nmySprite.delete();\na += 1"]]}]}]},{"timestamp":1743468461457,"editorVersion":"2.0.40","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1906,"length1":31,"diffs":[[1,"for (let i = 0; i <= 9; i++) {\n"]]}]}]},{"timestamp":1743468468517,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1906,"length1":30,"diffs":[[1,"for (let i = 5; i <= 9; i++) {\n"]]}]}]},{"timestamp":1743470820341,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1984,"length1":25,"diffs":[[1,"    menuItems.push(\"Option \" + (i + 1));\n"]]}]}]},{"timestamp":1743470838072,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1984,"length1":32,"diffs":[[1,"    menuItems.push( 1));\n"]]},{"start1":2374,"length1":6,"diffs":[[1,"    8\n"]]}]}]},{"timestamp":1743471002294,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1984,"length1":28,"diffs":[[1,"    menuItems.push(`${i + 1}`);\n"]]}]}]},{"timestamp":1743472931305,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1419,"length1":73,"diffs":[[1,"            this.menuItems.push(new Text(cursor[0], cursor[1], item));\n"]]}]}]},{"timestamp":1743472994398,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1419,"length1":84,"diffs":[[1,"            this.menuItems.push(new Text(cursor[0], cursor[1], item, ));\n"]]},{"start1":2115,"length1":174,"diffs":[[1,"let a = 1; // Index of the menu item to highlight\npic.fillRect(\n    menu.menuItems[a].text.x - menu.menuItems[a].text.width / 2,\n    menu.menuItems[a].text.y - menu.menuItems[a].text.height / 2,\n"]]},{"start1":2389,"length1":546,"diffs":[[1,"scene.setBackgroundImage(pic);\n"]]}]}]},{"timestamp":1743475927262,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":11598,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"x6G{,fAWJm;I/%=nzFn)\">pic</variable><variable id=\"$FkKTV!zCiHcOIf=fb`Q\">i</variable><variable id=\")Qhe*yYsLj|4W^)^;?gi\">menu_items</variable></variables><comment x=\"0\" y=\"0\" w=\"480\" h=\"120\">\nlet mySprite = sprites.create(box, SpriteKind.Player)\n</comment><comment x=\"0\" y=\"0\" w=\"480\" h=\"120\">\nmySprite.setPosition(menu.menu_items[a].text.x, menu.menu_items[a].text.y)\n</comment><block type=\"pxt-on-start\" x=\"-11\" y=\"140\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let a = 0\" numlines=\"1\" declaredvars=\"a\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menu_items: string[] = []\" numlines=\"1\" declaredvars=\"menu_items\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Correctly initializing the menu_items array with a list of strings</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Text {\" line1=\"    x: number;\" line2=\"    y: number;\" line3=\"    text: TextSprite;\" line4=\"    width: number;\" line5=\"\" line6=\"    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, border_width: number = 0, z: number = 10) {\" line7=\"        // Coordinates and text parameters\" line8=\"        this.x = x;\" line9=\"        this.y = y;\" line10=\"        this.text = textsprite.create(text);\" line11=\"\" line12=\"        // Setting text height, outline, Z and position\" line13=\"        this.text.setMaxFontHeight(height);\" line14=\"        this.text.setOutline(border_width, border);\" line15=\"        this.text.setPosition(x, y);\" line16=\"        this.text.z = z\" line17=\"        // Storing width of the text sprite\" line18=\"        this.width = this.text.width;\" line19=\"    }\" line20=\"\" line21=\"    public setTextPosition(x: number, y: number) {\" line22=\"        this.text.setPosition(x, y);\" line23=\"    }\" line24=\"\" line25=\"    public getX(): number {\" line26=\"        return this.text.x;\" line27=\"    }\" line28=\"\" line29=\"    public getY(): number {\" line30=\"        return this.text.y;\" line31=\"    }\" line32=\"}\" numlines=\"33\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Menu {\" line1=\"    menu_items: Text[];  // Declaring menu_items as an array of Text objects\" line2=\"\" line3=\"    constructor(items: string[]) {\" line4=\"        let cursor = [scene.screenWidth() / 2, 10];\" line5=\"        this.menu_items = [];  // Initializing the menu_items array\" line6=\"\" line7=\"        // Creating a new Text object for each item and positioning them vertically\" line8=\"        for (let item of items) {\" line9=\"            this.menu_items.push(new Text(cursor[0], cursor[1], item));\" line10=\"            cursor[1] += 10;  // Adjusting the vertical position for the next item\" line11=\"        }\" line12=\"    }\" line13=\"\" line14=\"    // Returning the menu items array\" line15=\"    public returnMenu(): Text[] {\" line16=\"        return this.menu_items;\" line17=\"    }\" line18=\"}\" numlines=\"19\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"x6G{,fAWJm;I/%=nzFn)\">pic</field><comment pinned=\"false\" h=\"80\" w=\"160\">Example usage:</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"scenescreenwidth\"></block></value><value name=\"height\"><block type=\"scenescreenheight\"></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x6G{,fAWJm;I/%=nzFn)\">pic</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"scenescreenwidth\"></block></value><value name=\"h\"><block type=\"scenescreenheight\"></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">0</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"x6G{,fAWJm;I/%=nzFn)\">pic</field></block></value><next><block type=\"pxt_controls_for\"><value name=\"VAR\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"$FkKTV!zCiHcOIf=fb`Q\">i</field></block></value><value name=\"TO\"><shadow type=\"math_whole_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_number\"><field name=\"NUM\">9</field></block></value><statement name=\"DO\"><block type=\"array_push\"><comment pinned=\"false\" h=\"80\" w=\"160\">Using a 1-based index for better display</comment><value name=\"list\"><block type=\"variables_get\"><field name=\"VAR\" id=\")Qhe*yYsLj|4W^)^;?gi\">menu_items</field></block></value><value name=\"value\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Option </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"$FkKTV!zCiHcOIf=fb`Q\">i</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value></block></value></block></statement><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menu = new Menu(menu_items);\" numlines=\"1\" declaredvars=\"menu\"></mutation><next><block type=\"Image_fillRect\"><comment pinned=\"false\" h=\"80\" w=\"160\">Accessing a specific menu item (for example, the second item)</comment><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x6G{,fAWJm;I/%=nzFn)\">pic</field></block></value><value name=\"x\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.x</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.width</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></value><value name=\"y\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.y</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.height</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">7</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"x6G{,fAWJm;I/%=nzFn)\">pic</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>"]]}]}]},{"timestamp":1743475932586,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":11594,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"7]oFWTg:FC(Q[bVbSDsv\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"{Hy:z+LBDZi7((G3yeGl\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"3fzno8eY-`^/Y7{^Q3m9\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"tlCD^/)qf/BLj*ucgss.\">Enemy</variable><variable type=\"KIND_SpriteKind\" id=\"{G=9w]s[l2$:{#?aVV]Z\">Text</variable><variable id=\"i7d@Y6Q[eRz31?cYi40q\">pic</variable><variable id=\"ozfGdp*nMf*{Bnjsgsrr\">i</variable><variable id=\"BxF9,mdgm+l9^uRRRZl2\">menuItems</variable><variable id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</variable><variable id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</variable><variable id=\"Unv%]%SYML-ZU?}]1]Ag\">a</variable></variables><block type=\"pxt-on-start\" x=\"-11\" y=\"140\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let a = 0\" numlines=\"1\" declaredvars=\"a\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menuItems: string[] = []\" numlines=\"1\" declaredvars=\"menuItems\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Initialize the menu_items array correctly</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Text {\" line1=\"    x: number;\" line2=\"    y: number;\" line3=\"    text: TextSprite;\" line4=\"    width: number;\" line5=\"\" line6=\"    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, borderWidth: number = 0, z: number = 10) {\" line7=\"        // Coordinates and text parameters\" line8=\"        this.x = x;\" line9=\"        this.y = y;\" line10=\"        this.text = textsprite.create(text);\" line11=\"\" line12=\"        // Set text height, outline, Z index, and position\" line13=\"        this.text.setMaxFontHeight(height);\" line14=\"        this.text.setOutline(borderWidth, border);\" line15=\"        this.text.setPosition(x, y);\" line16=\"        this.text.z = z;\" line17=\"\" line18=\"        // Store the width of the text sprite\" line19=\"        this.width = this.text.width;\" line20=\"    }\" line21=\"\" line22=\"    // Method to set text position\" line23=\"    public setTextPosition(x: number, y: number): void {\" line24=\"        this.text.setPosition(x, y);\" line25=\"    }\" line26=\"\" line27=\"    // Getters for x and y\" line28=\"    public getX(): number {\" line29=\"        return this.text.x;\" line30=\"    }\" line31=\"\" line32=\"    public getY(): number {\" line33=\"        return this.text.y;\" line34=\"    }\" line35=\"}\" numlines=\"36\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Menu {\" line1=\"    menuItems: Text[];  // Declaring menuItems as an array of Text objects\" line2=\"\" line3=\"    constructor(items: string[]) {\" line4=\"        let cursor = [scene.screenWidth() / 2, 10]; // Start at the center of the screen\" line5=\"        this.menuItems = []; // Initialize the menuItems array\" line6=\"\" line7=\"        // Create a new Text object for each menu item and position them vertically\" line8=\"        for (let item of items) {\" line9=\"            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\" line10=\"            cursor[1] += 10; // Adjust the vertical position for the next item\" line11=\"        }\" line12=\"    }\" line13=\"\" line14=\"    // Method to return the menu items\" line15=\"    public returnMenu(): Text[] {\" line16=\"        return this.menuItems;\" line17=\"    }\" line18=\"}\" numlines=\"19\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"i7d@Y6Q[eRz31?cYi40q\">pic</field><comment pinned=\"false\" h=\"80\" w=\"160\">Example usage:</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"scenescreenwidth\"></block></value><value name=\"height\"><block type=\"scenescreenheight\"></block></value></block></value><next><block type=\"Image_fillRect\"><comment pinned=\"false\" h=\"80\" w=\"160\">Fill the background</comment><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"i7d@Y6Q[eRz31?cYi40q\">pic</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"scenescreenwidth\"></block></value><value name=\"h\"><block type=\"scenescreenheight\"></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">0</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"i7d@Y6Q[eRz31?cYi40q\">pic</field></block></value><next><block type=\"pxt_controls_for\"><value name=\"VAR\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"ozfGdp*nMf*{Bnjsgsrr\">i</field></block></value><value name=\"TO\"><shadow type=\"math_whole_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_number\"><field name=\"NUM\">5</field></block></value><statement name=\"DO\"><block type=\"array_push\"><comment pinned=\"false\" h=\"80\" w=\"160\">Using a 1-based index for better display</comment><value name=\"list\"><block type=\"variables_get\"><field name=\"VAR\" id=\"BxF9,mdgm+l9^uRRRZl2\">menuItems</field></block></value><value name=\"value\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">`${i}`</field></block></value></block></statement><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menu = new Menu(menuItems);\" numlines=\"1\" declaredvars=\"menu\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"spritedestroy2\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"Unv%]%SYML-ZU?}]1]Ag\">a</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":10,"diffs":[[1,""]]},{"start1":45,"length1":29,"diffs":[[1,"let menuItems: string[] = [];\n\n"]]},{"start1":1023,"length1":0,"diffs":[[1,"\n"]]},{"start1":1711,"length1":0,"diffs":[[1,"\n"]]},{"start1":1730,"length1":215,"diffs":[[1,"\nlet pic = image.create(scene.screenWidth(), scene.screenHeight());\npic.fillRect(0, 0, scene.screenWidth(), scene.screenHeight(), 0); // Fill the background\nscene.setBackgroundImage(pic);\n\nfor (let i = 0; i < 6; i++) {\n"]]},{"start1":1997,"length1":27,"diffs":[[1,"    menuItems.push(`${i}`);\n"]]},{"start1":2027,"length1":0,"diffs":[[1,"\n"]]},{"start1":2060,"length1":177,"diffs":[[1,"\n// Accessing a specific menu item (for example, the second item)\nlet a = 0; // Index of the menu item to highlight\nlet selector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height);\nselector.fillRect(\n    0, \n    0,\n    menu.menuItems[a].text.width,\n    menu.menuItems[a].text.height,\n    2\n);\n\n\n"]]},{"start1":2512,"length1":0,"diffs":[[1,"\n"]]},{"start1":2551,"length1":179,"diffs":[[1,"\n\na = 4; // Index of the menu item to highlight\nselector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height);\nselector.fillRect(\n    0,\n    0,\n    menu.menuItems[a].text.width,\n    menu.menuItems[a].text.height,\n    2\n);\n\n\n"]]},{"start1":2853,"length1":73,"diffs":[[1,"mySprite.setPosition(menu.menuItems[a].text.x, menu.menuItems[a].text.y)"]]}]}]},{"timestamp":1743641052159,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1120,"length1":37,"diffs":[[1,"    constructor(items: string[]) {\n"]]}]}]},{"timestamp":1743641068147,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1120,"length1":135,"diffs":[[1,"    constructor(items: string[], ) {\n        let cursor = [scene.screenWidth() / 2, 10]; // Start at the center of the screen\n"]]},{"start1":2030,"length1":40,"diffs":[[1,"let menu = new Menu(menuItems);\n"]]}]}]},{"timestamp":1743641661857,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":11575,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"7]oFWTg:FC(Q[bVbSDsv\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"{Hy:z+LBDZi7((G3yeGl\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"3fzno8eY-`^/Y7{^Q3m9\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"tlCD^/)qf/BLj*ucgss.\">Enemy</variable><variable type=\"KIND_SpriteKind\" id=\"{G=9w]s[l2$:{#?aVV]Z\">Text</variable><variable id=\"i7d@Y6Q[eRz31?cYi40q\">pic</variable><variable id=\"ozfGdp*nMf*{Bnjsgsrr\">i</variable><variable id=\"BxF9,mdgm+l9^uRRRZl2\">menuItems</variable><variable id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</variable><variable id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</variable><variable id=\"Unv%]%SYML-ZU?}]1]Ag\">a</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let a = 0\" numlines=\"1\" declaredvars=\"a\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menuItems: string[] = []\" numlines=\"1\" declaredvars=\"menuItems\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Initialize the menu_items array correctly</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Text {\" line1=\"    x: number;\" line2=\"    y: number;\" line3=\"    text: TextSprite;\" line4=\"    width: number;\" line5=\"\" line6=\"    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, borderWidth: number = 0, z: number = 10) {\" line7=\"        // Coordinates and text parameters\" line8=\"        this.x = x;\" line9=\"        this.y = y;\" line10=\"        this.text = textsprite.create(text);\" line11=\"\" line12=\"        // Set text height, outline, Z index, and position\" line13=\"        this.text.setMaxFontHeight(height);\" line14=\"        this.text.setOutline(borderWidth, border);\" line15=\"        this.text.setPosition(x, y);\" line16=\"        this.text.z = z;\" line17=\"\" line18=\"        // Store the width of the text sprite\" line19=\"        this.width = this.text.width;\" line20=\"    }\" line21=\"\" line22=\"    // Method to set text position\" line23=\"    public setTextPosition(x: number, y: number): void {\" line24=\"        this.text.setPosition(x, y);\" line25=\"    }\" line26=\"\" line27=\"    // Getters for x and y\" line28=\"    public getX(): number {\" line29=\"        return this.text.x;\" line30=\"    }\" line31=\"\" line32=\"    public getY(): number {\" line33=\"        return this.text.y;\" line34=\"    }\" line35=\"}\" numlines=\"36\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Menu {\" line1=\"    menuItems: Text[];  // Declaring menuItems as an array of Text objects\" line2=\"\" line3=\"    constructor(items: string[]) {\" line4=\"        let cursor = [scene.screenWidth() / 2, 10]; // Start at the center of the screen\" line5=\"        this.menuItems = []; // Initialize the menuItems array\" line6=\"\" line7=\"        // Create a new Text object for each menu item and position them vertically\" line8=\"        for (let item of items) {\" line9=\"            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\" line10=\"            cursor[1] += 10; // Adjust the vertical position for the next item\" line11=\"        }\" line12=\"    }\" line13=\"\" line14=\"    // Method to return the menu items\" line15=\"    public returnMenu(): Text[] {\" line16=\"        return this.menuItems;\" line17=\"    }\" line18=\"}\" numlines=\"19\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"i7d@Y6Q[eRz31?cYi40q\">pic</field><comment pinned=\"false\" h=\"80\" w=\"160\">Example usage:</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"scenescreenwidth\"></block></value><value name=\"height\"><block type=\"scenescreenheight\"></block></value></block></value><next><block type=\"Image_fillRect\"><comment pinned=\"false\" h=\"80\" w=\"160\">Fill the background</comment><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"i7d@Y6Q[eRz31?cYi40q\">pic</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"scenescreenwidth\"></block></value><value name=\"h\"><block type=\"scenescreenheight\"></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">0</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"i7d@Y6Q[eRz31?cYi40q\">pic</field></block></value><next><block type=\"pxt_controls_for\"><value name=\"VAR\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"ozfGdp*nMf*{Bnjsgsrr\">i</field></block></value><value name=\"TO\"><shadow type=\"math_whole_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_number\"><field name=\"NUM\">5</field></block></value><statement name=\"DO\"><block type=\"array_push\"><comment pinned=\"false\" h=\"80\" w=\"160\">Using a 1-based index for better display</comment><value name=\"list\"><block type=\"variables_get\"><field name=\"VAR\" id=\"BxF9,mdgm+l9^uRRRZl2\">menuItems</field></block></value><value name=\"value\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">`${i}`</field></block></value></block></statement><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menu = new Menu(menuItems);\" numlines=\"1\" declaredvars=\"menu\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"spritedestroy2\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"Unv%]%SYML-ZU?}]1]Ag\">a</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":1119,"length1":22,"diffs":[[1,"\n"]]},{"start1":1183,"length1":97,"diffs":[[1,"        let cursor = [posX, posY]; // Start at the center of the screen\n"]]},{"start1":1318,"length1":26,"diffs":[[1,""]]},{"start1":1610,"length1":10,"diffs":[[1,""]]},{"start1":1617,"length1":115,"diffs":[[1,""]]},{"start1":2039,"length1":40,"diffs":[[1,"let menu = new Menu(menuItems, 10, 10);\n"]]}]}]},{"timestamp":1743642269255,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1770,"length1":29,"diffs":[[1,"            this.menuItems\n"]]}]}]},{"timestamp":1743642271219,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1119,"length1":58,"diffs":[[1,"    selector: Number;\n"]]},{"start1":1204,"length1":72,"diffs":[[1,"        let cursor = [screen.width / 2, screen.height / 2]; // Start at the center of the screen\n"]]},{"start1":1364,"length1":79,"diffs":[[1,"        this.selector = 0\n"]]},{"start1":1699,"length1":288,"diffs":[[1,"    public select(): void {\n        for (let item of this.menuItems) {\n            this.menuItems[]\n"]]},{"start1":1816,"length1":108,"diffs":[[1,""]]},{"start1":1928,"length1":1,"diffs":[[1,""]]},{"start1":2278,"length1":704,"diffs":[[1,"let selector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height)\nselector.fillRect(0, 0, menu.menuItems[a].text.width, menu.menuItems[a].text.height, 2)\nlet mySprite = sprites.create(selector, SpriteKind.Player)\nmySprite.setPosition(menu.menuItems[a].text.x, menu.menuItems[a].text.y)\npause(1000)\nsprites.destroy(mySprite)\na = 4\nselector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height)\nselector.fillRect(0, 0, menu.menuItems[a].text.width, menu.menuItems[a].text.height, 2)\nmySprite = sprites.create(selector, SpriteKind.Player)\nmySprite.setPosition(menu.menuItems[a].text.x, menu.menuItems[a].text.y)\n"]]}]}]},{"timestamp":1743642853491,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1854,"length1":139,"diffs":[[1,"        for (let item of items) {\n            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\n"]]},{"start1":2068,"length1":345,"diffs":[[1,"    public select(n: number): void {\n        this.menuItems[n].setTextPosition(this.posX, this.posY)\n"]]},{"start1":2640,"length1":15,"diffs":[[1,"menu.select(4)\n"]]}]}]},{"timestamp":1743643450525,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2127,"length1":91,"diffs":[[1,"        let cursor = [this.menuItems[n].x, (this.posY - this.menuItems[n].y)];\n"]]},{"start1":2756,"length1":32,"diffs":[[1,"for (let i = 0; i <= 5; i++) {\n"]]},{"start1":2864,"length1":65,"diffs":[[1,"let menu = new Menu(menuItems, 50, 10);\n"]]},{"start1":2905,"length1":10,"diffs":[[1,"menu.select(5)\n"]]},{"start1":2921,"length1":165,"diffs":[[1,"// let selector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height)\n// selector.fillRect(0, 0, menu.menuItems[a].text.width, menu.menuItems[a].text.height, 2)\n// let mySprite = sprites.create(selector, SpriteKind.Player)\n// mySprite.setPosition(menu.menuItems[a].text.x, menu.menuItems[a].text.y)\n// pause(1000)\n// sprites.destroy(mySprite)\n// a = 4\n// selector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height)\n// selector.fillRect(0, 0, menu.menuItems[a].text.width, menu.menuItems[a].text.height, 2)\n// mySprite = sprites.create(selector, SpriteKind.Player)\n// mySprite.setPosition(menu.menuItems[a].text.x, menu.menuItems[a].text.y)\n"]]}]}]},{"timestamp":1743643843831,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1177,"length1":24,"diffs":[[1,""]]},{"start1":1312,"length1":40,"diffs":[[1,""]]},{"start1":3095,"length1":82,"diffs":[[1,"    menu.select(n);\n"]]}]}]},{"timestamp":1743644445427,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3101,"length1":43,"diffs":[[1,"    if (controller.down.isPressed()) {\n"]]}]}]},{"timestamp":1743644477109,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3101,"length1":39,"diffs":[[1,"    if (controller.down.isPressed() and) {\n"]]},{"start1":3163,"length1":112,"diffs":[[1,"    menu.select(n = (n + menu.menuLength) % menu.menuLength);\n"]]}]}]},{"timestamp":1743645042000,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":55,"length1":72,"diffs":[[1,"let menuItems: string[] = []\n"]]},{"start1":1031,"length1":1,"diffs":[[1,""]]},{"start1":2832,"length1":121,"diffs":[[1,"for (let i = 0; i <= 20; i++) {\n    // Using a 1-based index for better display\n    menuItems.push(`${i}`)\n}\n"]]},{"start1":3017,"length1":14,"diffs":[[1,"\n"]]},{"start1":3039,"length1":0,"diffs":[[1,"    \n"]]},{"start1":3081,"length1":32,"diffs":[[1,"        n ++;\n"]]},{"start1":3153,"length1":19,"diffs":[[1,""]]},{"start1":3246,"length1":1,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1743645522211,"editorVersion":"2.0.46","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":775,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"dvTcdv}[P3B$Nm]uq.?%\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"zdS7Ok(2)NR/$N.CIo!P\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"o)zMb%HVOpXeS#=M2:fp\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"YJ}|PA0gm_X/h]D`}vDE\">Enemy</variable><variable type=\"KIND_SpriteKind\" id=\"|8hcqW}KO:2`Bs4AEA|u\">Text</variable><variable id=\"r1^/T{c+YRNM{]PumMsX\">pic</variable><variable id=\"sJV`S|Z~qk!A3s+R!L3!\">i</variable><variable id=\"Ei8DFZFwcYW#D;LsW:2t\">menuItems</variable><variable id=\"4YxK!y}(i!VH5obB2jlq\">selector</variable><variable id=\"(:V8354rRki(V0rE$U_|\">mySprite</variable><variable id=\"`T)sos;z-cxA$Z{WSnhV\">a</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menuItems: string[] = []\" numlines=\"1\" declaredvars=\"menuItems\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Initialize the menu_items array correctly</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let a = 0\" numlines=\"1\" declaredvars=\"a\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Text {\" line1=\"    x: number;\" line2=\"    y: number;\" line3=\"    text: TextSprite;\" line4=\"    width: number;\" line5=\"\" line6=\"    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, borderWidth: number = 0, z: number = 10) {\" line7=\"        // Coordinates and text parameters\" line8=\"        this.x = x;\" line9=\"        this.y = y;\" line10=\"        this.text = textsprite.create(text);\" line11=\"\" line12=\"        // Set text height, outline, Z index, and position\" line13=\"        this.text.setMaxFontHeight(height);\" line14=\"        this.text.setOutline(borderWidth, border);\" line15=\"        this.text.setPosition(x, y);\" line16=\"        this.text.z = z;\" line17=\"\" line18=\"        // Store the width of the text sprite\" line19=\"        this.width = this.text.width;\" line20=\"    }\" line21=\"\" line22=\"    // Method to set text position\" line23=\"    public setTextPosition(x: number, y: number): void {\" line24=\"        this.text.setPosition(x, y);\" line25=\"    }\" line26=\"\" line27=\"    // Getters for x and y\" line28=\"    public getX(): number {\" line29=\"        return this.text.x;\" line30=\"    }\" line31=\"\" line32=\"    public getY(): number {\" line33=\"        return this.text.y;\" line34=\"    }\" line35=\"}\" numlines=\"36\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Menu {\" line1=\"    menuItems: Text[];  // Declaring menuItems as an array of Text objects\" line2=\"\" line3=\"    constructor(items: string[], posX: number, posY: number) {\" line4=\"        let cursor = [screen.width/2, screen.height/2]; // Start at the center of the screen\" line5=\"        this.menuItems = []; // Initialize the menuItems array\" line6=\"\" line7=\"        // Create a new Text object for each menu item and position them vertically\" line8=\"        for (let item of items) {\" line9=\"            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\" line10=\"            cursor[1] += 10; // Adjust the vertical position for the next item\" line11=\"        }\" line12=\"    }\" line13=\"\" line14=\"    // Method to return the menu items\" line15=\"    public returnMenu(): Text[] {\" line16=\"        return this.menuItems;\" line17=\"    }\" line18=\"}\" numlines=\"19\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"r1^/T{c+YRNM{]PumMsX\">pic</field><comment pinned=\"false\" h=\"80\" w=\"160\">Example usage:</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"scenescreenwidth\"></block></value><value name=\"height\"><block type=\"scenescreenheight\"></block></value></block></value><next><block type=\"Image_fillRect\"><comment pinned=\"false\" h=\"80\" w=\"160\">Fill the background</comment><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"r1^/T{c+YRNM{]PumMsX\">pic</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"scenescreenwidth\"></block></value><value name=\"h\"><block type=\"scenescreenheight\"></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">0</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"r1^/T{c+YRNM{]PumMsX\">pic</field></block></value><next><block type=\"pxt_controls_for\"><value name=\"VAR\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"sJV`S|Z~qk!A3s+R!L3!\">i</field></block></value><value name=\"TO\"><shadow type=\"math_whole_number\"><field name=\"NUM\">5</field></shadow></value><statement name=\"DO\"><block type=\"array_push\"><comment pinned=\"false\" h=\"80\" w=\"160\">Using a 1-based index for better display</comment><value name=\"list\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Ei8DFZFwcYW#D;LsW:2t\">menuItems</field></block></value><value name=\"value\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">`${i}`</field></block></value></block></statement><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menu = new Menu(menuItems, 50, 10);\" numlines=\"1\" declaredvars=\"menu\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"spritedestroy2\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"`T)sos;z-cxA$Z{WSnhV\">a</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":459,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1743383763062,"editorVersion":"2.0.40","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"NxH38mzU+U%~-sI?HgLx\">pic</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"function createText(x: number, y: number, text: string, height: number = 1, border: number = 1, border_width: number = 0) {\" line1=\"    let text_sprite = textsprite.create(text)\" line2=\"    text_sprite.setMaxFontHeight(height)\" line3=\"    text_sprite.setOutline(border_width, border)\" line4=\"    text_sprite.setPosition(text_sprite.width / 2 + x, text_sprite.height / 2 + y)\" line5=\"}\" numlines=\"6\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"NxH38mzU+U%~-sI?HgLx\">pic</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"scenescreenwidth\"></block></value><value name=\"height\"><block type=\"scenescreenheight\"></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NxH38mzU+U%~-sI?HgLx\">pic</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"scenescreenwidth\"></block></value><value name=\"h\"><block type=\"scenescreenheight\"></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NxH38mzU+U%~-sI?HgLx\">pic</field></block></value><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"createText(10, 20, &quot;This is Text&quot;)\" numlines=\"1\"></mutation></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":" ","assets.json":"","main.py":"class Text:\n    def __init__(self, x: int, y: int, text: str, height: int = 1, border: int = 1, border_width: int = 0):\n        # Coordinates and text parameters\n        self.x = x\n        self.y = y\n        self.text = textsprite.create(text)  # Assuming textsprite.create() returns a text sprite object\n        \n        # Setting text height, outline, and position\n        self.text.set_max_font_height(height)\n        self.text.set_outline(border_width, border)\n        self.text.set_position(x, y)\n        \n        # Storing width of the text sprite\n        self.width = self.text.width\n\n\n    def setTextPosition(self, x, y):\n        self.text.set_position(x, y)\n\n    def getX(self):\n        return self.text.x\n\n    def getY(self):\n        return self.text.y\n\nclass Menu:\n    def __init__(self, items):\n        cursor = [scene.screen_width()/2, 10]\n        self.menu_items = []\n        for item in items:\n            self.menu_items.append(Text(cursor[0], cursor[1], item))\n            cursor[1] += 10\n\npic = image.create(scene.screen_width(), scene.screen_height())\npic.fill_rect(0, 0, scene.screen_width(), scene.screen_height(), 16)\nscene.set_background_image(pic)\n\nmenu_items = []\nfor i in range(10):\n    menu_items.append(\"Option \" + str(i))\n\nmenu = Menu(menu_items)\n\n\n# selector = image.create(menu.menu_items[1].text.width(), menu.menu_items[1].text.height())\n\n# hi = Text(scene.screen_width()/2, 10, \"Hi\")\n# bye = Text(scene.screen_width()/2, scene.screen_height()/2, \"Bye\")\n","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAJAJAAAAAAAAmQkAAAAAAAAJCQAAAAAAAJAJAAAAAAAAkAkAAAAAAACZAAAAAAAAAJAAAAAAAAAAmQAAAAAAAACZAAAAAAAAAJkAAAAAAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage0\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","arcade-text.json":"{\"README.md\":\"# Text Sprite ![Build status badge](https://github.com/microsoft/arcade-text/workflows/MakeCode/badge.svg)\\n\\n## Usage\\n\\nThis extension allows you to create \\\"text sprites\\\" which are just sprites created with the visual appearance of text. All standard behavior and APIs for sprites apply to them. In addition, the Text Sprite extension has helpful blocks for working with and changing the appearance of text sprites.\\n\\nNote that when unicode characters are in use, the font height used in text sprites will always be a multiple of 12px. Whereas otherwise we prefer to use multiples of height 8px or 5px fonts.\\n\\n<img width=\\\"416\\\" alt=\\\"Screen Shot 2020-08-20 at 8 00 21 AM\\\" src=\\\"https://user-images.githubusercontent.com/6453828/90789027-40137480-e2bb-11ea-81bd-440fa19abdc0.png\\\">\\n\\n## Use this extension\\n\\nThis repository can be added as an **extension** in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **New Project**\\n* click on **Extensions** under the gearwheel menu\\n* search for the URL of this repository and import\\n\\n## Edit this extension\\n\\nTo edit this repository in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **Import** then click on **Import URL**\\n* paste the repository URL and click import\\n\\n## Blocks preview\\n\\nThis image shows the blocks code from the last commit in master.\\nThis image may take a few minutes to refresh.\\n\\n![A rendered view of the blocks](https://github.com/microsoft/arcade-text/raw/master/.makecode/blocks.png)\\n\\n## Supported targets\\n\\n* for PXT/arcade\\n* for PXT/arcade\\n(The metadata above is needed for package search.)\\n\\n# Contributing\\n\\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\\n\\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\\nprovided by the bot. You will only need to do this once across all repos using our CLA.\\n\\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\\n\",\"main.blocks\":\"<xml xmlns=\\\"https://developers.google.com/blockly/xml\\\"><block type=\\\"pxt-on-start\\\" id=\\\"6Y6q)ncpNy{?8D%D=cv?\\\" x=\\\"0\\\" y=\\\"0\\\"/></xml>\",\"main.ts\":\"\\n\",\"pxt.json\":\"{\\n    \\\"name\\\": \\\"arcade-text\\\",\\n    \\\"version\\\": \\\"1.3.0\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"dependencies\\\": {\\n        \\\"device\\\": \\\"*\\\",\\n        \\\"hw---samd51\\\": \\\"*\\\"\\n    },\\n    \\\"files\\\": [\\n        \\\"main.blocks\\\",\\n        \\\"main.ts\\\",\\n        \\\"README.md\\\",\\n        \\\"text.ts\\\"\\n    ],\\n    \\\"testFiles\\\": [\\n        \\\"test.ts\\\"\\n    ],\\n    \\\"targetVersions\\\": {\\n        \\\"target\\\": \\\"1.2.6\\\",\\n        \\\"targetId\\\": \\\"arcade\\\"\\n    },\\n    \\\"supportedTargets\\\": [\\n        \\\"arcade\\\"\\n    ],\\n    \\\"preferredEditor\\\": \\\"tsprj\\\"\\n}\\n\",\"test.ts\":\"// tests go here; this will not be compiled when this package is used as an extension.\\nlet s3: TextSprite = null\\nlet s2: TextSprite = null\\nlet s1: TextSprite = null\\ninfo.setScore(99999)\\ninfo.setLife(5)\\nlet heights = [5, 8, 12, 24]\\nlet y = 24\\nfor (let h of heights) {\\n    s1 = textsprite.create(\\\"水\\\", 9, 8)\\n    s1.setBorder(1, 6, 1)\\n    s1.setMaxFontHeight(h)\\n    s1.setOutline(1, 1)\\n    s1.left = 2\\n    s1.top = y\\n    s2 = textsprite.create(\\\"h\\\" + h)\\n    s2.setMaxFontHeight(h)\\n    s2.setOutline(1, 6)\\n    s2.left = 36\\n    s2.top = y\\n    s3 = textsprite.create(\\\"x\\\" + \\\"99\\\", 1, 3)\\n    s3.setBorder(1, 3, 1)\\n    s3.setMaxFontHeight(h)\\n    s3.setIcon(img`\\n        . . 8 . .\\n        . . 8 . .\\n        . 8 8 8 .\\n        8 8 9 8 .\\n        8 9 1 8 .\\n        8 9 1 9 8\\n        8 8 9 9 8\\n        . 8 8 8 .\\n    `)\\n    s3.left = 92\\n    s3.top = y\\n    y += Math.max(s1.height, s2.height) + 2\\n}\\n\",\"text.ts\":\"namespace SpriteKind {\\n    //% isKind\\n    export const Text = SpriteKind.create();\\n}\\n\\n//% blockNamespace=\\\"textsprite\\\"\\n//% blockGap=8\\nclass TextSprite extends Sprite {\\n    constructor(\\n        public text: string,\\n        public bg: number,\\n        public fg: number,\\n        public maxFontHeight: number,\\n        public borderWidth: number,\\n        public borderColor: number,\\n        public padding: number,\\n        public outlineWidth: number,\\n        public outlineColor: number,\\n        public icon: Image = null,\\n    ) {\\n        super(image.create(0,0));\\n        this.setKind(SpriteKind.Text);\\n        this.setFlag(SpriteFlag.Ghost, true);\\n        this.update()\\n    }\\n\\n    public update() {\\n        const borderAndPadding = this.borderWidth + this.padding + this.outlineWidth;\\n        const iconWidth = this.icon ? this.icon.width + this.padding + this.outlineWidth : 0;\\n        const iconHeight = this.icon ? this.icon.height : 0;\\n        const font = textsprite.getFontForTextAndHeight(this.text, this.maxFontHeight);        \\n        const width = iconWidth + font.charWidth * this.text.length + 2 * borderAndPadding;\\n        const height = Math.max(iconHeight, font.charHeight) + 2 * borderAndPadding;\\n        const img = image.create(width, height);\\n        img.fill(this.borderColor);\\n        img.fillRect(this.borderWidth, this.borderWidth, width - this.borderWidth * 2, height - this.borderWidth * 2, this.bg)\\n        if (this.icon) {\\n            const iconHeightOffset = (height - iconHeight) / 2\\n            textsprite.renderScaledImage(this.icon, img, borderAndPadding, iconHeightOffset)\\n        }\\n        const textHeightOffset = (height - font.charHeight) / 2\\n        img.print(this.text, iconWidth + borderAndPadding, textHeightOffset, this.fg, font);\\n        if (this.outlineWidth > 0)\\n            textsprite.outlineOtherColor(img, this.fg, this.outlineWidth, this.outlineColor)\\n        this.setImage(img)        \\n    }\\n\\n    //% block=\\\"set $this(textSprite) max font height $height\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=50\\n    public setMaxFontHeight(height: number) {\\n        this.maxFontHeight = height\\n        this.update();\\n    }\\n\\n    //% block=\\\"set $this(textSprite) icon $icon=screen_image_picker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=46\\n    public setIcon(icon: Image) {\\n        this.icon = icon\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) text $text\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=47\\n    public setText(text: string) {\\n        this.text = text || \\\"\\\"\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) border $width $color || and padding $padding\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=48\\n    public setBorder(width: number, color: number, padding: number = 0) {\\n        this.borderWidth = Math.max(width, 0);\\n        this.borderColor = color;\\n        this.padding = Math.max(padding, 0);\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) outline $width $color\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=49\\n    public setOutline(width: number, color: number) {\\n        this.outlineWidth = Math.max(width, 0);\\n        this.outlineColor = color;\\n        this.update();\\n    }\\n}\\n\\n//% color=#3e99de\\n//% icon=\\\"\\\\uf031\\\"\\n//% blockGap=8 block=\\\"Text Sprite\\\"\\n//% groups='[\\\"Create\\\", \\\"Modify\\\"]'\\nnamespace textsprite {\\n\\n    // TODO: downscale and upscale icons?\\n    export function renderScaledImage(source: Image, destination: Image, x: number, y: number, downScalePowerOfTwo: number = 0) {\\n        const scale = downScalePowerOfTwo;\\n        const tile = source\\n        for (let i = 0; i < source.width; i += 1 << scale) {\\n            for (let j = 0; j < source.height; j += 1 << scale) {\\n                if (source.getPixel(i, j) != 0) {\\n                    destination.setPixel(x + (i >> scale), y + (j >> scale), source.getPixel(i, j))\\n                }\\n            }\\n        }\\n    }\\n\\n    export function getFontForTextAndHeight(text: string, maxHeight: number): image.Font {\\n        const baseFont = image.getFontForText(text)\\n        const hasUnicode = baseFont.charHeight === 12  // this is a hack\\n        const availableFonts: image.Font[] = hasUnicode \\n            ? [baseFont] \\n            : [image.font8, image.font5] // 8 and 5 are generally better fonts than 12\\n        const remainders = availableFonts.map(s => maxHeight % s.charHeight)\\n        const fontIdx = remainders.reduce((p, n, i) => remainders[p] <= n ? p : i, 99)\\n        const font = availableFonts[fontIdx]\\n        return image.scaledFont(font, maxHeight / font.charHeight)\\n    }\\n\\n    //% block=\\\"text sprite $text || as $fg on $bg\\\"\\n    //% blockId=\\\"textsprite_create\\\"\\n    //% blockSetVariable=\\\"textSprite\\\"\\n    //% expandableArgumentMode=\\\"toggle\\\"\\n    //% bg.defl=0\\n    //% bg.shadow=\\\"colorindexpicker\\\"\\n    //% fg.defl=1\\n    //% fg.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Create\\\"\\n    //% weight=100\\n    export function create(\\n        text: string,\\n        bg: number = 0,\\n        fg: number = 1,\\n    ): TextSprite {\\n        const sprite = new TextSprite(text, bg, fg, 8, 0, 0, 0, 0, 0);\\n        game.currentScene().physicsEngine.addSprite(sprite);\\n        return sprite;\\n    }\\n\\n    export function outlineOtherColor(img: Image, targetColor: number, outlineWidth: number, outlineColor: number) {\\n        let toOutlineX: number[] = [];\\n        let toOutlineY: number[] = [];\\n        for (let x = 0; x < img.width; x++) {\\n            for (let y = 0; y < img.height; y++) {\\n                for (let sx = 0; sx <= outlineWidth; sx++) {\\n                    for (let sy = 0; sy <= outlineWidth; sy++) {\\n                        if (sx + sy === 0)\\n                            continue;\\n                        if (img.getPixel(x, y) === targetColor)\\n                            continue\\n                        if (img.getPixel(x + sx, y + sy) === targetColor\\n                            || img.getPixel(x - sx, y + sy) === targetColor\\n                            || img.getPixel(x + sx, y - sy) === targetColor\\n                            || img.getPixel(x - sx, y - sy) === targetColor\\n                            ) {\\n                            toOutlineX.push(x)\\n                            toOutlineY.push(y)\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        for (let i = 0; i < toOutlineX.length; i++) {\\n            const x = toOutlineX[i]\\n            const y = toOutlineY[i]\\n            img.setPixel(x, y, outlineColor)\\n        }\\n    }\\n}\"}","pxt.json":"{\n    \"name\": \"hiohigiti\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Color Fading\": \"github:jwunderl/pxt-color#v0.2.3\",\n        \"arcade-text\": \"github:microsoft/arcade-text#fa2439314c6633943666a763fdae32a5c67a9ae8\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"images.g.jres\",\n        \"images.g.ts\",\n        \"arcade-text.json\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v2.0.40\",\n        \"tag\": \"v2.0.40\",\n        \"commits\": \"https://github.com/microsoft/pxt-arcade/commits/e365009949b9c899fc4c9914e30e362bd22a209b\",\n        \"target\": \"2.0.40\",\n        \"pxt\": \"11.3.48\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1743385669375,"editorVersion":"2.0.40","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"NxH38mzU+U%~-sI?HgLx\">pic</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"function createText(x: number, y: number, text: string, height: number = 1, border: number = 1, border_width: number = 0) {\" line1=\"    let text_sprite = textsprite.create(text)\" line2=\"    text_sprite.setMaxFontHeight(height)\" line3=\"    text_sprite.setOutline(border_width, border)\" line4=\"    text_sprite.setPosition(text_sprite.width / 2 + x, text_sprite.height / 2 + y)\" line5=\"}\" numlines=\"6\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"NxH38mzU+U%~-sI?HgLx\">pic</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"scenescreenwidth\"></block></value><value name=\"height\"><block type=\"scenescreenheight\"></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NxH38mzU+U%~-sI?HgLx\">pic</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"scenescreenwidth\"></block></value><value name=\"h\"><block type=\"scenescreenheight\"></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">11</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NxH38mzU+U%~-sI?HgLx\">pic</field></block></value><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"createText(10, 20, &quot;This is Text&quot;)\" numlines=\"1\"></mutation></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"class Text {\n    x: number;\n    y: number;\n    text: TextSprite;\n    width: number;\n\n    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, border_width: number = 0) {\n        // Coordinates and text parameters\n        this.x = x;\n        this.y = y;\n        this.text = textsprite.create(text);\n\n        // Setting text height, outline, and position\n        this.text.setMaxFontHeight(height);\n        this.text.setOutline(border_width, border);\n        this.text.setPosition(x, y);\n\n        // Storing width of the text sprite\n        this.width = this.text.width;\n    }\n\n    public setTextPosition(x: number, y: number) {\n        this.text.setPosition(x, y);\n    }\n\n    public getX(): number {\n        return this.text.x;\n    }\n\n    public getY(): number {\n        return this.text.y;\n    }\n}\n\nclass Menu {\n    menu_items: Text[];  // Declaring menu_items as an array of Text objects\n\n    constructor(items: string[]) {\n        let cursor = [scene.screenWidth() / 2, 10];\n        this.menu_items = [];  // Initializing the menu_items array\n\n        // Creating a new Text object for each item and positioning them vertically\n        for (let item of items) {\n            this.menu_items.push(new Text(cursor[0], cursor[1], item));\n            cursor[1] += 10;  // Adjusting the vertical position for the next item\n        }\n    }\n\n    // Returning the menu items array\n    public returnMenu(): Text[] {\n        return this.menu_items;\n    }\n}\n\n// Example usage:\n\nlet pic = image.create(scene.screenWidth(), scene.screenHeight());\npic.fillRect(0, 0, scene.screenWidth(), scene.screenHeight(), 16);\nscene.setBackgroundImage(pic);\n\n// Correctly initializing the menu_items array with a list of strings\nlet menu_items: string[] = [];\nfor (let i = 0; i < 10; i++) {\n    menu_items.push(\"Option \" + (i + 1));  // Using a 1-based index for better display\n}\n\n// Creating a new Menu object with the menu items\nlet menu = new Menu(menu_items);\n\n// Accessing a specific menu item (for example, the second item)\nlet box = image.create(menu.menu_items[1].text.width, menu.menu_items[1].text.height);\nbox.fillRect(0, 0, menu.menu_items[1].text.width, menu.menu_items[1].text.height, 7);\nlet mySprite = sprites.create(box, SpriteKind.Player)\nmySprite.setPosition(menu.menu_items[1].text.x, menu.menu_items[1].text.y)","README.md":" ","assets.json":"","main.py":"class Text:\n    def __init__(self, x: int, y: int, text: str, height: int = 1, border: int = 1, border_width: int = 0):\n        # Coordinates and text parameters\n        self.x = x\n        self.y = y\n        self.text = textsprite.create(text)  # Assuming textsprite.create() returns a text sprite object\n        \n        # Setting text height, outline, and position\n        self.text.set_max_font_height(height)\n        self.text.set_outline(border_width, border)\n        self.text.set_position(x, y)\n        \n        # Storing width of the text sprite\n        self.width = self.text.width\n\n\n    def setTextPosition(self, x, y):\n        self.text.set_position(x, y)\n\n    def getX(self):\n        return self.text.x\n\n    def getY(self):\n        return self.text.y\n\nclass Menu:\n    def __init__(self, items):\n        cursor = [scene.screen_width()/2, 10]\n        self.menu_items = []\n        for item in items:\n            self.menu_items.append(Text(cursor[0], cursor[1], item))\n            cursor[1] += 10\n    \n    def returnMenu(self):\n        return menu_items\n\npic = image.create(scene.screen_width(), scene.screen_height())\npic.fill_rect(0, 0, scene.screen_width(), scene.screen_height(), 16)\nscene.set_background_image(pic)\n\nmenu_items = []\nfor i in range(10):\n    menu_items.append(\"Option \" + str(i))\n\nmenu = Menu(menu_items)\n\nmenu.menu_items[1]\n\n\n# selector = image.create(menu.menu_items[1].text.width(), menu.menu_items[1].text.height())\n\n# hi = Text(scene.screen_width()/2, 10, \"Hi\")\n# bye = Text(scene.screen_width()/2, scene.screen_height()/2, \"Bye\")\n","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAJAJAAAAAAAAmQkAAAAAAAAJCQAAAAAAAJAJAAAAAAAAkAkAAAAAAACZAAAAAAAAAJAAAAAAAAAAmQAAAAAAAACZAAAAAAAAAJkAAAAAAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage0\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","arcade-text.json":"{\"README.md\":\"# Text Sprite ![Build status badge](https://github.com/microsoft/arcade-text/workflows/MakeCode/badge.svg)\\n\\n## Usage\\n\\nThis extension allows you to create \\\"text sprites\\\" which are just sprites created with the visual appearance of text. All standard behavior and APIs for sprites apply to them. In addition, the Text Sprite extension has helpful blocks for working with and changing the appearance of text sprites.\\n\\nNote that when unicode characters are in use, the font height used in text sprites will always be a multiple of 12px. Whereas otherwise we prefer to use multiples of height 8px or 5px fonts.\\n\\n<img width=\\\"416\\\" alt=\\\"Screen Shot 2020-08-20 at 8 00 21 AM\\\" src=\\\"https://user-images.githubusercontent.com/6453828/90789027-40137480-e2bb-11ea-81bd-440fa19abdc0.png\\\">\\n\\n## Use this extension\\n\\nThis repository can be added as an **extension** in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **New Project**\\n* click on **Extensions** under the gearwheel menu\\n* search for the URL of this repository and import\\n\\n## Edit this extension\\n\\nTo edit this repository in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **Import** then click on **Import URL**\\n* paste the repository URL and click import\\n\\n## Blocks preview\\n\\nThis image shows the blocks code from the last commit in master.\\nThis image may take a few minutes to refresh.\\n\\n![A rendered view of the blocks](https://github.com/microsoft/arcade-text/raw/master/.makecode/blocks.png)\\n\\n## Supported targets\\n\\n* for PXT/arcade\\n* for PXT/arcade\\n(The metadata above is needed for package search.)\\n\\n# Contributing\\n\\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\\n\\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\\nprovided by the bot. You will only need to do this once across all repos using our CLA.\\n\\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\\n\",\"main.blocks\":\"<xml xmlns=\\\"https://developers.google.com/blockly/xml\\\"><block type=\\\"pxt-on-start\\\" id=\\\"6Y6q)ncpNy{?8D%D=cv?\\\" x=\\\"0\\\" y=\\\"0\\\"/></xml>\",\"main.ts\":\"\\n\",\"pxt.json\":\"{\\n    \\\"name\\\": \\\"arcade-text\\\",\\n    \\\"version\\\": \\\"1.3.0\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"dependencies\\\": {\\n        \\\"device\\\": \\\"*\\\",\\n        \\\"hw---samd51\\\": \\\"*\\\"\\n    },\\n    \\\"files\\\": [\\n        \\\"main.blocks\\\",\\n        \\\"main.ts\\\",\\n        \\\"README.md\\\",\\n        \\\"text.ts\\\"\\n    ],\\n    \\\"testFiles\\\": [\\n        \\\"test.ts\\\"\\n    ],\\n    \\\"targetVersions\\\": {\\n        \\\"target\\\": \\\"1.2.6\\\",\\n        \\\"targetId\\\": \\\"arcade\\\"\\n    },\\n    \\\"supportedTargets\\\": [\\n        \\\"arcade\\\"\\n    ],\\n    \\\"preferredEditor\\\": \\\"tsprj\\\"\\n}\\n\",\"test.ts\":\"// tests go here; this will not be compiled when this package is used as an extension.\\nlet s3: TextSprite = null\\nlet s2: TextSprite = null\\nlet s1: TextSprite = null\\ninfo.setScore(99999)\\ninfo.setLife(5)\\nlet heights = [5, 8, 12, 24]\\nlet y = 24\\nfor (let h of heights) {\\n    s1 = textsprite.create(\\\"水\\\", 9, 8)\\n    s1.setBorder(1, 6, 1)\\n    s1.setMaxFontHeight(h)\\n    s1.setOutline(1, 1)\\n    s1.left = 2\\n    s1.top = y\\n    s2 = textsprite.create(\\\"h\\\" + h)\\n    s2.setMaxFontHeight(h)\\n    s2.setOutline(1, 6)\\n    s2.left = 36\\n    s2.top = y\\n    s3 = textsprite.create(\\\"x\\\" + \\\"99\\\", 1, 3)\\n    s3.setBorder(1, 3, 1)\\n    s3.setMaxFontHeight(h)\\n    s3.setIcon(img`\\n        . . 8 . .\\n        . . 8 . .\\n        . 8 8 8 .\\n        8 8 9 8 .\\n        8 9 1 8 .\\n        8 9 1 9 8\\n        8 8 9 9 8\\n        . 8 8 8 .\\n    `)\\n    s3.left = 92\\n    s3.top = y\\n    y += Math.max(s1.height, s2.height) + 2\\n}\\n\",\"text.ts\":\"namespace SpriteKind {\\n    //% isKind\\n    export const Text = SpriteKind.create();\\n}\\n\\n//% blockNamespace=\\\"textsprite\\\"\\n//% blockGap=8\\nclass TextSprite extends Sprite {\\n    constructor(\\n        public text: string,\\n        public bg: number,\\n        public fg: number,\\n        public maxFontHeight: number,\\n        public borderWidth: number,\\n        public borderColor: number,\\n        public padding: number,\\n        public outlineWidth: number,\\n        public outlineColor: number,\\n        public icon: Image = null,\\n    ) {\\n        super(image.create(0,0));\\n        this.setKind(SpriteKind.Text);\\n        this.setFlag(SpriteFlag.Ghost, true);\\n        this.update()\\n    }\\n\\n    public update() {\\n        const borderAndPadding = this.borderWidth + this.padding + this.outlineWidth;\\n        const iconWidth = this.icon ? this.icon.width + this.padding + this.outlineWidth : 0;\\n        const iconHeight = this.icon ? this.icon.height : 0;\\n        const font = textsprite.getFontForTextAndHeight(this.text, this.maxFontHeight);        \\n        const width = iconWidth + font.charWidth * this.text.length + 2 * borderAndPadding;\\n        const height = Math.max(iconHeight, font.charHeight) + 2 * borderAndPadding;\\n        const img = image.create(width, height);\\n        img.fill(this.borderColor);\\n        img.fillRect(this.borderWidth, this.borderWidth, width - this.borderWidth * 2, height - this.borderWidth * 2, this.bg)\\n        if (this.icon) {\\n            const iconHeightOffset = (height - iconHeight) / 2\\n            textsprite.renderScaledImage(this.icon, img, borderAndPadding, iconHeightOffset)\\n        }\\n        const textHeightOffset = (height - font.charHeight) / 2\\n        img.print(this.text, iconWidth + borderAndPadding, textHeightOffset, this.fg, font);\\n        if (this.outlineWidth > 0)\\n            textsprite.outlineOtherColor(img, this.fg, this.outlineWidth, this.outlineColor)\\n        this.setImage(img)        \\n    }\\n\\n    //% block=\\\"set $this(textSprite) max font height $height\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=50\\n    public setMaxFontHeight(height: number) {\\n        this.maxFontHeight = height\\n        this.update();\\n    }\\n\\n    //% block=\\\"set $this(textSprite) icon $icon=screen_image_picker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=46\\n    public setIcon(icon: Image) {\\n        this.icon = icon\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) text $text\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=47\\n    public setText(text: string) {\\n        this.text = text || \\\"\\\"\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) border $width $color || and padding $padding\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=48\\n    public setBorder(width: number, color: number, padding: number = 0) {\\n        this.borderWidth = Math.max(width, 0);\\n        this.borderColor = color;\\n        this.padding = Math.max(padding, 0);\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) outline $width $color\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=49\\n    public setOutline(width: number, color: number) {\\n        this.outlineWidth = Math.max(width, 0);\\n        this.outlineColor = color;\\n        this.update();\\n    }\\n}\\n\\n//% color=#3e99de\\n//% icon=\\\"\\\\uf031\\\"\\n//% blockGap=8 block=\\\"Text Sprite\\\"\\n//% groups='[\\\"Create\\\", \\\"Modify\\\"]'\\nnamespace textsprite {\\n\\n    // TODO: downscale and upscale icons?\\n    export function renderScaledImage(source: Image, destination: Image, x: number, y: number, downScalePowerOfTwo: number = 0) {\\n        const scale = downScalePowerOfTwo;\\n        const tile = source\\n        for (let i = 0; i < source.width; i += 1 << scale) {\\n            for (let j = 0; j < source.height; j += 1 << scale) {\\n                if (source.getPixel(i, j) != 0) {\\n                    destination.setPixel(x + (i >> scale), y + (j >> scale), source.getPixel(i, j))\\n                }\\n            }\\n        }\\n    }\\n\\n    export function getFontForTextAndHeight(text: string, maxHeight: number): image.Font {\\n        const baseFont = image.getFontForText(text)\\n        const hasUnicode = baseFont.charHeight === 12  // this is a hack\\n        const availableFonts: image.Font[] = hasUnicode \\n            ? [baseFont] \\n            : [image.font8, image.font5] // 8 and 5 are generally better fonts than 12\\n        const remainders = availableFonts.map(s => maxHeight % s.charHeight)\\n        const fontIdx = remainders.reduce((p, n, i) => remainders[p] <= n ? p : i, 99)\\n        const font = availableFonts[fontIdx]\\n        return image.scaledFont(font, maxHeight / font.charHeight)\\n    }\\n\\n    //% block=\\\"text sprite $text || as $fg on $bg\\\"\\n    //% blockId=\\\"textsprite_create\\\"\\n    //% blockSetVariable=\\\"textSprite\\\"\\n    //% expandableArgumentMode=\\\"toggle\\\"\\n    //% bg.defl=0\\n    //% bg.shadow=\\\"colorindexpicker\\\"\\n    //% fg.defl=1\\n    //% fg.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Create\\\"\\n    //% weight=100\\n    export function create(\\n        text: string,\\n        bg: number = 0,\\n        fg: number = 1,\\n    ): TextSprite {\\n        const sprite = new TextSprite(text, bg, fg, 8, 0, 0, 0, 0, 0);\\n        game.currentScene().physicsEngine.addSprite(sprite);\\n        return sprite;\\n    }\\n\\n    export function outlineOtherColor(img: Image, targetColor: number, outlineWidth: number, outlineColor: number) {\\n        let toOutlineX: number[] = [];\\n        let toOutlineY: number[] = [];\\n        for (let x = 0; x < img.width; x++) {\\n            for (let y = 0; y < img.height; y++) {\\n                for (let sx = 0; sx <= outlineWidth; sx++) {\\n                    for (let sy = 0; sy <= outlineWidth; sy++) {\\n                        if (sx + sy === 0)\\n                            continue;\\n                        if (img.getPixel(x, y) === targetColor)\\n                            continue\\n                        if (img.getPixel(x + sx, y + sy) === targetColor\\n                            || img.getPixel(x - sx, y + sy) === targetColor\\n                            || img.getPixel(x + sx, y - sy) === targetColor\\n                            || img.getPixel(x - sx, y - sy) === targetColor\\n                            ) {\\n                            toOutlineX.push(x)\\n                            toOutlineY.push(y)\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        for (let i = 0; i < toOutlineX.length; i++) {\\n            const x = toOutlineX[i]\\n            const y = toOutlineY[i]\\n            img.setPixel(x, y, outlineColor)\\n        }\\n    }\\n}\"}","pxt.json":"{\n    \"name\": \"hiohigiti\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Color Fading\": \"github:jwunderl/pxt-color#v0.2.3\",\n        \"arcade-text\": \"github:microsoft/arcade-text#fa2439314c6633943666a763fdae32a5c67a9ae8\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"images.g.jres\",\n        \"images.g.ts\",\n        \"arcade-text.json\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v2.0.40\",\n        \"tag\": \"v2.0.40\",\n        \"commits\": \"https://github.com/microsoft/pxt-arcade/commits/e365009949b9c899fc4c9914e30e362bd22a209b\",\n        \"target\": \"2.0.40\",\n        \"pxt\": \"11.3.48\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1743475927262,"editorVersion":"2.0.46","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"x6G{,fAWJm;I/%=nzFn)\">pic</variable><variable id=\"$FkKTV!zCiHcOIf=fb`Q\">i</variable><variable id=\")Qhe*yYsLj|4W^)^;?gi\">menu_items</variable></variables><comment x=\"0\" y=\"0\" w=\"480\" h=\"120\">\nlet mySprite = sprites.create(box, SpriteKind.Player)\n</comment><comment x=\"0\" y=\"0\" w=\"480\" h=\"120\">\nmySprite.setPosition(menu.menu_items[a].text.x, menu.menu_items[a].text.y)\n</comment><block type=\"pxt-on-start\" x=\"-11\" y=\"140\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let a = 0\" numlines=\"1\" declaredvars=\"a\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menu_items: string[] = []\" numlines=\"1\" declaredvars=\"menu_items\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Correctly initializing the menu_items array with a list of strings</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Text {\" line1=\"    x: number;\" line2=\"    y: number;\" line3=\"    text: TextSprite;\" line4=\"    width: number;\" line5=\"\" line6=\"    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, border_width: number = 0, z: number = 10) {\" line7=\"        // Coordinates and text parameters\" line8=\"        this.x = x;\" line9=\"        this.y = y;\" line10=\"        this.text = textsprite.create(text);\" line11=\"\" line12=\"        // Setting text height, outline, Z and position\" line13=\"        this.text.setMaxFontHeight(height);\" line14=\"        this.text.setOutline(border_width, border);\" line15=\"        this.text.setPosition(x, y);\" line16=\"        this.text.z = z\" line17=\"        // Storing width of the text sprite\" line18=\"        this.width = this.text.width;\" line19=\"    }\" line20=\"\" line21=\"    public setTextPosition(x: number, y: number) {\" line22=\"        this.text.setPosition(x, y);\" line23=\"    }\" line24=\"\" line25=\"    public getX(): number {\" line26=\"        return this.text.x;\" line27=\"    }\" line28=\"\" line29=\"    public getY(): number {\" line30=\"        return this.text.y;\" line31=\"    }\" line32=\"}\" numlines=\"33\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Menu {\" line1=\"    menu_items: Text[];  // Declaring menu_items as an array of Text objects\" line2=\"\" line3=\"    constructor(items: string[]) {\" line4=\"        let cursor = [scene.screenWidth() / 2, 10];\" line5=\"        this.menu_items = [];  // Initializing the menu_items array\" line6=\"\" line7=\"        // Creating a new Text object for each item and positioning them vertically\" line8=\"        for (let item of items) {\" line9=\"            this.menu_items.push(new Text(cursor[0], cursor[1], item));\" line10=\"            cursor[1] += 10;  // Adjusting the vertical position for the next item\" line11=\"        }\" line12=\"    }\" line13=\"\" line14=\"    // Returning the menu items array\" line15=\"    public returnMenu(): Text[] {\" line16=\"        return this.menu_items;\" line17=\"    }\" line18=\"}\" numlines=\"19\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"x6G{,fAWJm;I/%=nzFn)\">pic</field><comment pinned=\"false\" h=\"80\" w=\"160\">Example usage:</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"scenescreenwidth\"></block></value><value name=\"height\"><block type=\"scenescreenheight\"></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x6G{,fAWJm;I/%=nzFn)\">pic</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"scenescreenwidth\"></block></value><value name=\"h\"><block type=\"scenescreenheight\"></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">0</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"x6G{,fAWJm;I/%=nzFn)\">pic</field></block></value><next><block type=\"pxt_controls_for\"><value name=\"VAR\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"$FkKTV!zCiHcOIf=fb`Q\">i</field></block></value><value name=\"TO\"><shadow type=\"math_whole_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_number\"><field name=\"NUM\">9</field></block></value><statement name=\"DO\"><block type=\"array_push\"><comment pinned=\"false\" h=\"80\" w=\"160\">Using a 1-based index for better display</comment><value name=\"list\"><block type=\"variables_get\"><field name=\"VAR\" id=\")Qhe*yYsLj|4W^)^;?gi\">menu_items</field></block></value><value name=\"value\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Option </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"$FkKTV!zCiHcOIf=fb`Q\">i</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value></block></value></block></statement><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menu = new Menu(menu_items);\" numlines=\"1\" declaredvars=\"menu\"></mutation><next><block type=\"Image_fillRect\"><comment pinned=\"false\" h=\"80\" w=\"160\">Accessing a specific menu item (for example, the second item)</comment><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x6G{,fAWJm;I/%=nzFn)\">pic</field></block></value><value name=\"x\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.x</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.width</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></value><value name=\"y\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.y</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.height</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menu_items[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">7</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"x6G{,fAWJm;I/%=nzFn)\">pic</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"// Initialize the menu_items array correctly\nlet menuItems: string[] = [];\n\nclass Text {\n    x: number;\n    y: number;\n    text: TextSprite;\n    width: number;\n\n    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, borderWidth: number = 0, z: number = 10) {\n        // Coordinates and text parameters\n        this.x = x;\n        this.y = y;\n        this.text = textsprite.create(text);\n\n        // Set text height, outline, Z index, and position\n        this.text.setMaxFontHeight(height);\n        this.text.setOutline(borderWidth, border);\n        this.text.setPosition(x, y);\n        this.text.z = z;\n\n        // Store the width of the text sprite\n        this.width = this.text.width;\n    }\n\n    // Method to set text position\n    public setTextPosition(x: number, y: number): void {\n        this.text.setPosition(x, y);\n    }\n\n    // Getters for x and y\n    public getX(): number {\n        return this.text.x;\n    }\n\n    public getY(): number {\n        return this.text.y;\n    }\n}\n\nclass Menu {\n    menuItems: Text[];  // Declaring menuItems as an array of Text objects\n\n    constructor(items: string[]) {\n        let cursor = [scene.screenWidth() / 2, 10]; // Start at the center of the screen\n        this.menuItems = []; // Initialize the menuItems array\n\n        // Create a new Text object for each menu item and position them vertically\n        for (let item of items) {\n            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\n            cursor[1] += 10; // Adjust the vertical position for the next item\n        }\n    }\n\n    // Method to return the menu items\n    public returnMenu(): Text[] {\n        return this.menuItems;\n    }\n}\n\n// Example usage:\n\nlet pic = image.create(scene.screenWidth(), scene.screenHeight());\npic.fillRect(0, 0, scene.screenWidth(), scene.screenHeight(), 0); // Fill the background\nscene.setBackgroundImage(pic);\n\nfor (let i = 0; i < 6; i++) {\n    // Using a 1-based index for better display\n    menuItems.push(`${i}`);\n}\n\nlet menu = new Menu(menuItems);\n\n// Accessing a specific menu item (for example, the second item)\nlet a = 0; // Index of the menu item to highlight\nlet selector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height);\nselector.fillRect(\n    0, \n    0,\n    menu.menuItems[a].text.width,\n    menu.menuItems[a].text.height,\n    2\n);\n\n\nlet mySprite = sprites.create(selector, SpriteKind.Player)\nmySprite.setPosition(menu.menuItems[a].text.x, menu.menuItems[a].text.y)\n\npause(1000)\nsprites.destroy(mySprite)\n\n\na = 4; // Index of the menu item to highlight\nselector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height);\nselector.fillRect(\n    0,\n    0,\n    menu.menuItems[a].text.width,\n    menu.menuItems[a].text.height,\n    2\n);\n\n\nmySprite = sprites.create(selector, SpriteKind.Player)\nmySprite.setPosition(menu.menuItems[a].text.x, menu.menuItems[a].text.y)","README.md":" ","assets.json":"","main.py":"class Text:\n    def __init__(self, x: int, y: int, text: str, height: int = 1, border: int = 1, border_width: int = 0):\n        # Coordinates and text parameters\n        self.x = x\n        self.y = y\n        self.text = textsprite.create(text)  # Assuming textsprite.create() returns a text sprite object\n        \n        # Setting text height, outline, and position\n        self.text.set_max_font_height(height)\n        self.text.set_outline(border_width, border)\n        self.text.set_position(x, y)\n        \n        # Storing width of the text sprite\n        self.width = self.text.width\n\n\n    def setTextPosition(self, x, y):\n        self.text.set_position(x, y)\n\n    def getX(self):\n        return self.text.x\n\n    def getY(self):\n        return self.text.y\n\nclass Menu:\n    def __init__(self, items):\n        cursor = [scene.screen_width()/2, 10]\n        self.menu_items = []\n        for item in items:\n            self.menu_items.append(Text(cursor[0], cursor[1], item))\n            cursor[1] += 10\n    \n    def returnMenu(self):\n        return menu_items\n\npic = image.create(scene.screen_width(), scene.screen_height())\npic.fill_rect(0, 0, scene.screen_width(), scene.screen_height(), 16)\nscene.set_background_image(pic)\n\nmenu_items = []\nfor i in range(10):\n    menu_items.append(\"Option \" + str(i))\n\nmenu = Menu(menu_items)\n\nmenu.menu_items[1]\n\n\n# selector = image.create(menu.menu_items[1].text.width(), menu.menu_items[1].text.height())\n\n# hi = Text(scene.screen_width()/2, 10, \"Hi\")\n# bye = Text(scene.screen_width()/2, scene.screen_height()/2, \"Bye\")\n","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAJAJAAAAAAAAmQkAAAAAAAAJCQAAAAAAAJAJAAAAAAAAkAkAAAAAAACZAAAAAAAAAJAAAAAAAAAAmQAAAAAAAACZAAAAAAAAAJkAAAAAAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage0\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","arcade-text.json":"{\"README.md\":\"# Text Sprite ![Build status badge](https://github.com/microsoft/arcade-text/workflows/MakeCode/badge.svg)\\n\\n## Usage\\n\\nThis extension allows you to create \\\"text sprites\\\" which are just sprites created with the visual appearance of text. All standard behavior and APIs for sprites apply to them. In addition, the Text Sprite extension has helpful blocks for working with and changing the appearance of text sprites.\\n\\nNote that when unicode characters are in use, the font height used in text sprites will always be a multiple of 12px. Whereas otherwise we prefer to use multiples of height 8px or 5px fonts.\\n\\n<img width=\\\"416\\\" alt=\\\"Screen Shot 2020-08-20 at 8 00 21 AM\\\" src=\\\"https://user-images.githubusercontent.com/6453828/90789027-40137480-e2bb-11ea-81bd-440fa19abdc0.png\\\">\\n\\n## Use this extension\\n\\nThis repository can be added as an **extension** in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **New Project**\\n* click on **Extensions** under the gearwheel menu\\n* search for the URL of this repository and import\\n\\n## Edit this extension\\n\\nTo edit this repository in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **Import** then click on **Import URL**\\n* paste the repository URL and click import\\n\\n## Blocks preview\\n\\nThis image shows the blocks code from the last commit in master.\\nThis image may take a few minutes to refresh.\\n\\n![A rendered view of the blocks](https://github.com/microsoft/arcade-text/raw/master/.makecode/blocks.png)\\n\\n## Supported targets\\n\\n* for PXT/arcade\\n* for PXT/arcade\\n(The metadata above is needed for package search.)\\n\\n# Contributing\\n\\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\\n\\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\\nprovided by the bot. You will only need to do this once across all repos using our CLA.\\n\\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\\n\",\"main.blocks\":\"<xml xmlns=\\\"https://developers.google.com/blockly/xml\\\"><block type=\\\"pxt-on-start\\\" id=\\\"6Y6q)ncpNy{?8D%D=cv?\\\" x=\\\"0\\\" y=\\\"0\\\"/></xml>\",\"main.ts\":\"\\n\",\"pxt.json\":\"{\\n    \\\"name\\\": \\\"arcade-text\\\",\\n    \\\"version\\\": \\\"1.3.0\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"dependencies\\\": {\\n        \\\"device\\\": \\\"*\\\",\\n        \\\"hw---samd51\\\": \\\"*\\\"\\n    },\\n    \\\"files\\\": [\\n        \\\"main.blocks\\\",\\n        \\\"main.ts\\\",\\n        \\\"README.md\\\",\\n        \\\"text.ts\\\"\\n    ],\\n    \\\"testFiles\\\": [\\n        \\\"test.ts\\\"\\n    ],\\n    \\\"targetVersions\\\": {\\n        \\\"target\\\": \\\"1.2.6\\\",\\n        \\\"targetId\\\": \\\"arcade\\\"\\n    },\\n    \\\"supportedTargets\\\": [\\n        \\\"arcade\\\"\\n    ],\\n    \\\"preferredEditor\\\": \\\"tsprj\\\"\\n}\\n\",\"test.ts\":\"// tests go here; this will not be compiled when this package is used as an extension.\\nlet s3: TextSprite = null\\nlet s2: TextSprite = null\\nlet s1: TextSprite = null\\ninfo.setScore(99999)\\ninfo.setLife(5)\\nlet heights = [5, 8, 12, 24]\\nlet y = 24\\nfor (let h of heights) {\\n    s1 = textsprite.create(\\\"水\\\", 9, 8)\\n    s1.setBorder(1, 6, 1)\\n    s1.setMaxFontHeight(h)\\n    s1.setOutline(1, 1)\\n    s1.left = 2\\n    s1.top = y\\n    s2 = textsprite.create(\\\"h\\\" + h)\\n    s2.setMaxFontHeight(h)\\n    s2.setOutline(1, 6)\\n    s2.left = 36\\n    s2.top = y\\n    s3 = textsprite.create(\\\"x\\\" + \\\"99\\\", 1, 3)\\n    s3.setBorder(1, 3, 1)\\n    s3.setMaxFontHeight(h)\\n    s3.setIcon(img`\\n        . . 8 . .\\n        . . 8 . .\\n        . 8 8 8 .\\n        8 8 9 8 .\\n        8 9 1 8 .\\n        8 9 1 9 8\\n        8 8 9 9 8\\n        . 8 8 8 .\\n    `)\\n    s3.left = 92\\n    s3.top = y\\n    y += Math.max(s1.height, s2.height) + 2\\n}\\n\",\"text.ts\":\"namespace SpriteKind {\\n    //% isKind\\n    export const Text = SpriteKind.create();\\n}\\n\\n//% blockNamespace=\\\"textsprite\\\"\\n//% blockGap=8\\nclass TextSprite extends Sprite {\\n    constructor(\\n        public text: string,\\n        public bg: number,\\n        public fg: number,\\n        public maxFontHeight: number,\\n        public borderWidth: number,\\n        public borderColor: number,\\n        public padding: number,\\n        public outlineWidth: number,\\n        public outlineColor: number,\\n        public icon: Image = null,\\n    ) {\\n        super(image.create(0,0));\\n        this.setKind(SpriteKind.Text);\\n        this.setFlag(SpriteFlag.Ghost, true);\\n        this.update()\\n    }\\n\\n    public update() {\\n        const borderAndPadding = this.borderWidth + this.padding + this.outlineWidth;\\n        const iconWidth = this.icon ? this.icon.width + this.padding + this.outlineWidth : 0;\\n        const iconHeight = this.icon ? this.icon.height : 0;\\n        const font = textsprite.getFontForTextAndHeight(this.text, this.maxFontHeight);        \\n        const width = iconWidth + font.charWidth * this.text.length + 2 * borderAndPadding;\\n        const height = Math.max(iconHeight, font.charHeight) + 2 * borderAndPadding;\\n        const img = image.create(width, height);\\n        img.fill(this.borderColor);\\n        img.fillRect(this.borderWidth, this.borderWidth, width - this.borderWidth * 2, height - this.borderWidth * 2, this.bg)\\n        if (this.icon) {\\n            const iconHeightOffset = (height - iconHeight) / 2\\n            textsprite.renderScaledImage(this.icon, img, borderAndPadding, iconHeightOffset)\\n        }\\n        const textHeightOffset = (height - font.charHeight) / 2\\n        img.print(this.text, iconWidth + borderAndPadding, textHeightOffset, this.fg, font);\\n        if (this.outlineWidth > 0)\\n            textsprite.outlineOtherColor(img, this.fg, this.outlineWidth, this.outlineColor)\\n        this.setImage(img)        \\n    }\\n\\n    //% block=\\\"set $this(textSprite) max font height $height\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=50\\n    public setMaxFontHeight(height: number) {\\n        this.maxFontHeight = height\\n        this.update();\\n    }\\n\\n    //% block=\\\"set $this(textSprite) icon $icon=screen_image_picker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=46\\n    public setIcon(icon: Image) {\\n        this.icon = icon\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) text $text\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=47\\n    public setText(text: string) {\\n        this.text = text || \\\"\\\"\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) border $width $color || and padding $padding\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=48\\n    public setBorder(width: number, color: number, padding: number = 0) {\\n        this.borderWidth = Math.max(width, 0);\\n        this.borderColor = color;\\n        this.padding = Math.max(padding, 0);\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) outline $width $color\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=49\\n    public setOutline(width: number, color: number) {\\n        this.outlineWidth = Math.max(width, 0);\\n        this.outlineColor = color;\\n        this.update();\\n    }\\n}\\n\\n//% color=#3e99de\\n//% icon=\\\"\\\\uf031\\\"\\n//% blockGap=8 block=\\\"Text Sprite\\\"\\n//% groups='[\\\"Create\\\", \\\"Modify\\\"]'\\nnamespace textsprite {\\n\\n    // TODO: downscale and upscale icons?\\n    export function renderScaledImage(source: Image, destination: Image, x: number, y: number, downScalePowerOfTwo: number = 0) {\\n        const scale = downScalePowerOfTwo;\\n        const tile = source\\n        for (let i = 0; i < source.width; i += 1 << scale) {\\n            for (let j = 0; j < source.height; j += 1 << scale) {\\n                if (source.getPixel(i, j) != 0) {\\n                    destination.setPixel(x + (i >> scale), y + (j >> scale), source.getPixel(i, j))\\n                }\\n            }\\n        }\\n    }\\n\\n    export function getFontForTextAndHeight(text: string, maxHeight: number): image.Font {\\n        const baseFont = image.getFontForText(text)\\n        const hasUnicode = baseFont.charHeight === 12  // this is a hack\\n        const availableFonts: image.Font[] = hasUnicode \\n            ? [baseFont] \\n            : [image.font8, image.font5] // 8 and 5 are generally better fonts than 12\\n        const remainders = availableFonts.map(s => maxHeight % s.charHeight)\\n        const fontIdx = remainders.reduce((p, n, i) => remainders[p] <= n ? p : i, 99)\\n        const font = availableFonts[fontIdx]\\n        return image.scaledFont(font, maxHeight / font.charHeight)\\n    }\\n\\n    //% block=\\\"text sprite $text || as $fg on $bg\\\"\\n    //% blockId=\\\"textsprite_create\\\"\\n    //% blockSetVariable=\\\"textSprite\\\"\\n    //% expandableArgumentMode=\\\"toggle\\\"\\n    //% bg.defl=0\\n    //% bg.shadow=\\\"colorindexpicker\\\"\\n    //% fg.defl=1\\n    //% fg.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Create\\\"\\n    //% weight=100\\n    export function create(\\n        text: string,\\n        bg: number = 0,\\n        fg: number = 1,\\n    ): TextSprite {\\n        const sprite = new TextSprite(text, bg, fg, 8, 0, 0, 0, 0, 0);\\n        game.currentScene().physicsEngine.addSprite(sprite);\\n        return sprite;\\n    }\\n\\n    export function outlineOtherColor(img: Image, targetColor: number, outlineWidth: number, outlineColor: number) {\\n        let toOutlineX: number[] = [];\\n        let toOutlineY: number[] = [];\\n        for (let x = 0; x < img.width; x++) {\\n            for (let y = 0; y < img.height; y++) {\\n                for (let sx = 0; sx <= outlineWidth; sx++) {\\n                    for (let sy = 0; sy <= outlineWidth; sy++) {\\n                        if (sx + sy === 0)\\n                            continue;\\n                        if (img.getPixel(x, y) === targetColor)\\n                            continue\\n                        if (img.getPixel(x + sx, y + sy) === targetColor\\n                            || img.getPixel(x - sx, y + sy) === targetColor\\n                            || img.getPixel(x + sx, y - sy) === targetColor\\n                            || img.getPixel(x - sx, y - sy) === targetColor\\n                            ) {\\n                            toOutlineX.push(x)\\n                            toOutlineY.push(y)\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        for (let i = 0; i < toOutlineX.length; i++) {\\n            const x = toOutlineX[i]\\n            const y = toOutlineY[i]\\n            img.setPixel(x, y, outlineColor)\\n        }\\n    }\\n}\"}","pxt.json":"{\n    \"name\": \"hiohigiti\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Color Fading\": \"github:jwunderl/pxt-color#v0.2.3\",\n        \"arcade-text\": \"github:microsoft/arcade-text#fa2439314c6633943666a763fdae32a5c67a9ae8\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"images.g.jres\",\n        \"images.g.ts\",\n        \"arcade-text.json\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v2.0.40\",\n        \"tag\": \"v2.0.40\",\n        \"commits\": \"https://github.com/microsoft/pxt-arcade/commits/e365009949b9c899fc4c9914e30e362bd22a209b\",\n        \"target\": \"2.0.40\",\n        \"pxt\": \"11.3.48\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1743641052159,"editorVersion":"2.0.46","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"7]oFWTg:FC(Q[bVbSDsv\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"{Hy:z+LBDZi7((G3yeGl\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"3fzno8eY-`^/Y7{^Q3m9\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"tlCD^/)qf/BLj*ucgss.\">Enemy</variable><variable type=\"KIND_SpriteKind\" id=\"{G=9w]s[l2$:{#?aVV]Z\">Text</variable><variable id=\"i7d@Y6Q[eRz31?cYi40q\">pic</variable><variable id=\"ozfGdp*nMf*{Bnjsgsrr\">i</variable><variable id=\"BxF9,mdgm+l9^uRRRZl2\">menuItems</variable><variable id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</variable><variable id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</variable><variable id=\"Unv%]%SYML-ZU?}]1]Ag\">a</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let a = 0\" numlines=\"1\" declaredvars=\"a\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menuItems: string[] = []\" numlines=\"1\" declaredvars=\"menuItems\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Initialize the menu_items array correctly</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Text {\" line1=\"    x: number;\" line2=\"    y: number;\" line3=\"    text: TextSprite;\" line4=\"    width: number;\" line5=\"\" line6=\"    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, borderWidth: number = 0, z: number = 10) {\" line7=\"        // Coordinates and text parameters\" line8=\"        this.x = x;\" line9=\"        this.y = y;\" line10=\"        this.text = textsprite.create(text);\" line11=\"\" line12=\"        // Set text height, outline, Z index, and position\" line13=\"        this.text.setMaxFontHeight(height);\" line14=\"        this.text.setOutline(borderWidth, border);\" line15=\"        this.text.setPosition(x, y);\" line16=\"        this.text.z = z;\" line17=\"\" line18=\"        // Store the width of the text sprite\" line19=\"        this.width = this.text.width;\" line20=\"    }\" line21=\"\" line22=\"    // Method to set text position\" line23=\"    public setTextPosition(x: number, y: number): void {\" line24=\"        this.text.setPosition(x, y);\" line25=\"    }\" line26=\"\" line27=\"    // Getters for x and y\" line28=\"    public getX(): number {\" line29=\"        return this.text.x;\" line30=\"    }\" line31=\"\" line32=\"    public getY(): number {\" line33=\"        return this.text.y;\" line34=\"    }\" line35=\"}\" numlines=\"36\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Menu {\" line1=\"    menuItems: Text[];  // Declaring menuItems as an array of Text objects\" line2=\"\" line3=\"    constructor(items: string[]) {\" line4=\"        let cursor = [scene.screenWidth() / 2, 10]; // Start at the center of the screen\" line5=\"        this.menuItems = []; // Initialize the menuItems array\" line6=\"\" line7=\"        // Create a new Text object for each menu item and position them vertically\" line8=\"        for (let item of items) {\" line9=\"            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\" line10=\"            cursor[1] += 10; // Adjust the vertical position for the next item\" line11=\"        }\" line12=\"    }\" line13=\"\" line14=\"    // Method to return the menu items\" line15=\"    public returnMenu(): Text[] {\" line16=\"        return this.menuItems;\" line17=\"    }\" line18=\"}\" numlines=\"19\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"i7d@Y6Q[eRz31?cYi40q\">pic</field><comment pinned=\"false\" h=\"80\" w=\"160\">Example usage:</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"scenescreenwidth\"></block></value><value name=\"height\"><block type=\"scenescreenheight\"></block></value></block></value><next><block type=\"Image_fillRect\"><comment pinned=\"false\" h=\"80\" w=\"160\">Fill the background</comment><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"i7d@Y6Q[eRz31?cYi40q\">pic</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"scenescreenwidth\"></block></value><value name=\"h\"><block type=\"scenescreenheight\"></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">0</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"i7d@Y6Q[eRz31?cYi40q\">pic</field></block></value><next><block type=\"pxt_controls_for\"><value name=\"VAR\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"ozfGdp*nMf*{Bnjsgsrr\">i</field></block></value><value name=\"TO\"><shadow type=\"math_whole_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_number\"><field name=\"NUM\">5</field></block></value><statement name=\"DO\"><block type=\"array_push\"><comment pinned=\"false\" h=\"80\" w=\"160\">Using a 1-based index for better display</comment><value name=\"list\"><block type=\"variables_get\"><field name=\"VAR\" id=\"BxF9,mdgm+l9^uRRRZl2\">menuItems</field></block></value><value name=\"value\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">`${i}`</field></block></value></block></statement><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menu = new Menu(menuItems);\" numlines=\"1\" declaredvars=\"menu\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"spritedestroy2\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"Unv%]%SYML-ZU?}]1]Ag\">a</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"M-tZ9;%$:B[lF?ca.OTh\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8YY(0Z}1w:NTL;G$|$Lm\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"let a = 0\n// Initialize the menu_items array correctly\nlet menuItems: string[] = []\nclass Text {\n    x: number;\n    y: number;\n    text: TextSprite;\n    width: number;\n\n    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, borderWidth: number = 0, z: number = 10) {\n        // Coordinates and text parameters\n        this.x = x;\n        this.y = y;\n        this.text = textsprite.create(text);\n\n        // Set text height, outline, Z index, and position\n        this.text.setMaxFontHeight(height);\n        this.text.setOutline(borderWidth, border);\n        this.text.setPosition(x, y);\n        this.text.z = z;\n\n        // Store the width of the text sprite\n        this.width = this.text.width;\n    }\n\n    // Method to set text position\n    public setTextPosition(x: number, y: number): void {\n        this.text.setPosition(x, y);\n    }\n\n    // Getters for x and y\n    public getX(): number {\n        return this.text.x;\n    }\n\n    public getY(): number {\n        return this.text.y;\n    }\n}\nclass Menu {\n    menuItems: Text[];  // Declaring menuItems as an array of Text objects\n\n    constructor(items: string[]) {\n        let cursor = [scene.screenWidth() / 2, 10]; // Start at the center of the screen\n        this.menuItems = []; // Initialize the menuItems array\n\n        // Create a new Text object for each menu item and position them vertically\n        for (let item of items) {\n            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\n            cursor[1] += 10; // Adjust the vertical position for the next item\n        }\n    }\n\n    // Method to return the menu items\n    public returnMenu(): Text[] {\n        return this.menuItems;\n    }\n}\n// Example usage:\nlet pic = image.create(scene.screenWidth(), scene.screenHeight())\n// Fill the background\npic.fillRect(0, 0, scene.screenWidth(), scene.screenHeight(), 0)\nscene.setBackgroundImage(pic)\nfor (let i = 0; i <= 5; i++) {\n    // Using a 1-based index for better display\n    menuItems.push(`${i}`)\n}\nlet menu = new Menu(menuItems);\nlet selector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height)\nselector.fillRect(0, 0, menu.menuItems[a].text.width, menu.menuItems[a].text.height, 2)\nlet mySprite = sprites.create(selector, SpriteKind.Player)\nmySprite.setPosition(menu.menuItems[a].text.x, menu.menuItems[a].text.y)\npause(1000)\nsprites.destroy(mySprite)\na = 4\nselector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height)\nselector.fillRect(0, 0, menu.menuItems[a].text.width, menu.menuItems[a].text.height, 2)\nmySprite = sprites.create(selector, SpriteKind.Player)\nmySprite.setPosition(menu.menuItems[a].text.x, menu.menuItems[a].text.y)\n","README.md":" ","assets.json":"","main.py":"class Text:\n    def __init__(self, x: int, y: int, text: str, height: int = 1, border: int = 1, border_width: int = 0):\n        # Coordinates and text parameters\n        self.x = x\n        self.y = y\n        self.text = textsprite.create(text)  # Assuming textsprite.create() returns a text sprite object\n        \n        # Setting text height, outline, and position\n        self.text.set_max_font_height(height)\n        self.text.set_outline(border_width, border)\n        self.text.set_position(x, y)\n        \n        # Storing width of the text sprite\n        self.width = self.text.width\n\n\n    def setTextPosition(self, x, y):\n        self.text.set_position(x, y)\n\n    def getX(self):\n        return self.text.x\n\n    def getY(self):\n        return self.text.y\n\nclass Menu:\n    def __init__(self, items):\n        cursor = [scene.screen_width()/2, 10]\n        self.menu_items = []\n        for item in items:\n            self.menu_items.append(Text(cursor[0], cursor[1], item))\n            cursor[1] += 10\n    \n    def returnMenu(self):\n        return menu_items\n\npic = image.create(scene.screen_width(), scene.screen_height())\npic.fill_rect(0, 0, scene.screen_width(), scene.screen_height(), 16)\nscene.set_background_image(pic)\n\nmenu_items = []\nfor i in range(10):\n    menu_items.append(\"Option \" + str(i))\n\nmenu = Menu(menu_items)\n\nmenu.menu_items[1]\n\n\n# selector = image.create(menu.menu_items[1].text.width(), menu.menu_items[1].text.height())\n\n# hi = Text(scene.screen_width()/2, 10, \"Hi\")\n# bye = Text(scene.screen_width()/2, scene.screen_height()/2, \"Bye\")\n","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAJAJAAAAAAAAmQkAAAAAAAAJCQAAAAAAAJAJAAAAAAAAkAkAAAAAAACZAAAAAAAAAJAAAAAAAAAAmQAAAAAAAACZAAAAAAAAAJkAAAAAAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage0\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","arcade-text.json":"{\"README.md\":\"# Text Sprite ![Build status badge](https://github.com/microsoft/arcade-text/workflows/MakeCode/badge.svg)\\n\\n## Usage\\n\\nThis extension allows you to create \\\"text sprites\\\" which are just sprites created with the visual appearance of text. All standard behavior and APIs for sprites apply to them. In addition, the Text Sprite extension has helpful blocks for working with and changing the appearance of text sprites.\\n\\nNote that when unicode characters are in use, the font height used in text sprites will always be a multiple of 12px. Whereas otherwise we prefer to use multiples of height 8px or 5px fonts.\\n\\n<img width=\\\"416\\\" alt=\\\"Screen Shot 2020-08-20 at 8 00 21 AM\\\" src=\\\"https://user-images.githubusercontent.com/6453828/90789027-40137480-e2bb-11ea-81bd-440fa19abdc0.png\\\">\\n\\n## Use this extension\\n\\nThis repository can be added as an **extension** in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **New Project**\\n* click on **Extensions** under the gearwheel menu\\n* search for the URL of this repository and import\\n\\n## Edit this extension\\n\\nTo edit this repository in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **Import** then click on **Import URL**\\n* paste the repository URL and click import\\n\\n## Blocks preview\\n\\nThis image shows the blocks code from the last commit in master.\\nThis image may take a few minutes to refresh.\\n\\n![A rendered view of the blocks](https://github.com/microsoft/arcade-text/raw/master/.makecode/blocks.png)\\n\\n## Supported targets\\n\\n* for PXT/arcade\\n* for PXT/arcade\\n(The metadata above is needed for package search.)\\n\\n# Contributing\\n\\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\\n\\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\\nprovided by the bot. You will only need to do this once across all repos using our CLA.\\n\\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\\n\",\"main.blocks\":\"<xml xmlns=\\\"https://developers.google.com/blockly/xml\\\"><block type=\\\"pxt-on-start\\\" id=\\\"6Y6q)ncpNy{?8D%D=cv?\\\" x=\\\"0\\\" y=\\\"0\\\"/></xml>\",\"main.ts\":\"\\n\",\"pxt.json\":\"{\\n    \\\"name\\\": \\\"arcade-text\\\",\\n    \\\"version\\\": \\\"1.3.0\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"dependencies\\\": {\\n        \\\"device\\\": \\\"*\\\",\\n        \\\"hw---samd51\\\": \\\"*\\\"\\n    },\\n    \\\"files\\\": [\\n        \\\"main.blocks\\\",\\n        \\\"main.ts\\\",\\n        \\\"README.md\\\",\\n        \\\"text.ts\\\"\\n    ],\\n    \\\"testFiles\\\": [\\n        \\\"test.ts\\\"\\n    ],\\n    \\\"targetVersions\\\": {\\n        \\\"target\\\": \\\"1.2.6\\\",\\n        \\\"targetId\\\": \\\"arcade\\\"\\n    },\\n    \\\"supportedTargets\\\": [\\n        \\\"arcade\\\"\\n    ],\\n    \\\"preferredEditor\\\": \\\"tsprj\\\"\\n}\\n\",\"test.ts\":\"// tests go here; this will not be compiled when this package is used as an extension.\\nlet s3: TextSprite = null\\nlet s2: TextSprite = null\\nlet s1: TextSprite = null\\ninfo.setScore(99999)\\ninfo.setLife(5)\\nlet heights = [5, 8, 12, 24]\\nlet y = 24\\nfor (let h of heights) {\\n    s1 = textsprite.create(\\\"水\\\", 9, 8)\\n    s1.setBorder(1, 6, 1)\\n    s1.setMaxFontHeight(h)\\n    s1.setOutline(1, 1)\\n    s1.left = 2\\n    s1.top = y\\n    s2 = textsprite.create(\\\"h\\\" + h)\\n    s2.setMaxFontHeight(h)\\n    s2.setOutline(1, 6)\\n    s2.left = 36\\n    s2.top = y\\n    s3 = textsprite.create(\\\"x\\\" + \\\"99\\\", 1, 3)\\n    s3.setBorder(1, 3, 1)\\n    s3.setMaxFontHeight(h)\\n    s3.setIcon(img`\\n        . . 8 . .\\n        . . 8 . .\\n        . 8 8 8 .\\n        8 8 9 8 .\\n        8 9 1 8 .\\n        8 9 1 9 8\\n        8 8 9 9 8\\n        . 8 8 8 .\\n    `)\\n    s3.left = 92\\n    s3.top = y\\n    y += Math.max(s1.height, s2.height) + 2\\n}\\n\",\"text.ts\":\"namespace SpriteKind {\\n    //% isKind\\n    export const Text = SpriteKind.create();\\n}\\n\\n//% blockNamespace=\\\"textsprite\\\"\\n//% blockGap=8\\nclass TextSprite extends Sprite {\\n    constructor(\\n        public text: string,\\n        public bg: number,\\n        public fg: number,\\n        public maxFontHeight: number,\\n        public borderWidth: number,\\n        public borderColor: number,\\n        public padding: number,\\n        public outlineWidth: number,\\n        public outlineColor: number,\\n        public icon: Image = null,\\n    ) {\\n        super(image.create(0,0));\\n        this.setKind(SpriteKind.Text);\\n        this.setFlag(SpriteFlag.Ghost, true);\\n        this.update()\\n    }\\n\\n    public update() {\\n        const borderAndPadding = this.borderWidth + this.padding + this.outlineWidth;\\n        const iconWidth = this.icon ? this.icon.width + this.padding + this.outlineWidth : 0;\\n        const iconHeight = this.icon ? this.icon.height : 0;\\n        const font = textsprite.getFontForTextAndHeight(this.text, this.maxFontHeight);        \\n        const width = iconWidth + font.charWidth * this.text.length + 2 * borderAndPadding;\\n        const height = Math.max(iconHeight, font.charHeight) + 2 * borderAndPadding;\\n        const img = image.create(width, height);\\n        img.fill(this.borderColor);\\n        img.fillRect(this.borderWidth, this.borderWidth, width - this.borderWidth * 2, height - this.borderWidth * 2, this.bg)\\n        if (this.icon) {\\n            const iconHeightOffset = (height - iconHeight) / 2\\n            textsprite.renderScaledImage(this.icon, img, borderAndPadding, iconHeightOffset)\\n        }\\n        const textHeightOffset = (height - font.charHeight) / 2\\n        img.print(this.text, iconWidth + borderAndPadding, textHeightOffset, this.fg, font);\\n        if (this.outlineWidth > 0)\\n            textsprite.outlineOtherColor(img, this.fg, this.outlineWidth, this.outlineColor)\\n        this.setImage(img)        \\n    }\\n\\n    //% block=\\\"set $this(textSprite) max font height $height\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=50\\n    public setMaxFontHeight(height: number) {\\n        this.maxFontHeight = height\\n        this.update();\\n    }\\n\\n    //% block=\\\"set $this(textSprite) icon $icon=screen_image_picker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=46\\n    public setIcon(icon: Image) {\\n        this.icon = icon\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) text $text\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=47\\n    public setText(text: string) {\\n        this.text = text || \\\"\\\"\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) border $width $color || and padding $padding\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=48\\n    public setBorder(width: number, color: number, padding: number = 0) {\\n        this.borderWidth = Math.max(width, 0);\\n        this.borderColor = color;\\n        this.padding = Math.max(padding, 0);\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) outline $width $color\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=49\\n    public setOutline(width: number, color: number) {\\n        this.outlineWidth = Math.max(width, 0);\\n        this.outlineColor = color;\\n        this.update();\\n    }\\n}\\n\\n//% color=#3e99de\\n//% icon=\\\"\\\\uf031\\\"\\n//% blockGap=8 block=\\\"Text Sprite\\\"\\n//% groups='[\\\"Create\\\", \\\"Modify\\\"]'\\nnamespace textsprite {\\n\\n    // TODO: downscale and upscale icons?\\n    export function renderScaledImage(source: Image, destination: Image, x: number, y: number, downScalePowerOfTwo: number = 0) {\\n        const scale = downScalePowerOfTwo;\\n        const tile = source\\n        for (let i = 0; i < source.width; i += 1 << scale) {\\n            for (let j = 0; j < source.height; j += 1 << scale) {\\n                if (source.getPixel(i, j) != 0) {\\n                    destination.setPixel(x + (i >> scale), y + (j >> scale), source.getPixel(i, j))\\n                }\\n            }\\n        }\\n    }\\n\\n    export function getFontForTextAndHeight(text: string, maxHeight: number): image.Font {\\n        const baseFont = image.getFontForText(text)\\n        const hasUnicode = baseFont.charHeight === 12  // this is a hack\\n        const availableFonts: image.Font[] = hasUnicode \\n            ? [baseFont] \\n            : [image.font8, image.font5] // 8 and 5 are generally better fonts than 12\\n        const remainders = availableFonts.map(s => maxHeight % s.charHeight)\\n        const fontIdx = remainders.reduce((p, n, i) => remainders[p] <= n ? p : i, 99)\\n        const font = availableFonts[fontIdx]\\n        return image.scaledFont(font, maxHeight / font.charHeight)\\n    }\\n\\n    //% block=\\\"text sprite $text || as $fg on $bg\\\"\\n    //% blockId=\\\"textsprite_create\\\"\\n    //% blockSetVariable=\\\"textSprite\\\"\\n    //% expandableArgumentMode=\\\"toggle\\\"\\n    //% bg.defl=0\\n    //% bg.shadow=\\\"colorindexpicker\\\"\\n    //% fg.defl=1\\n    //% fg.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Create\\\"\\n    //% weight=100\\n    export function create(\\n        text: string,\\n        bg: number = 0,\\n        fg: number = 1,\\n    ): TextSprite {\\n        const sprite = new TextSprite(text, bg, fg, 8, 0, 0, 0, 0, 0);\\n        game.currentScene().physicsEngine.addSprite(sprite);\\n        return sprite;\\n    }\\n\\n    export function outlineOtherColor(img: Image, targetColor: number, outlineWidth: number, outlineColor: number) {\\n        let toOutlineX: number[] = [];\\n        let toOutlineY: number[] = [];\\n        for (let x = 0; x < img.width; x++) {\\n            for (let y = 0; y < img.height; y++) {\\n                for (let sx = 0; sx <= outlineWidth; sx++) {\\n                    for (let sy = 0; sy <= outlineWidth; sy++) {\\n                        if (sx + sy === 0)\\n                            continue;\\n                        if (img.getPixel(x, y) === targetColor)\\n                            continue\\n                        if (img.getPixel(x + sx, y + sy) === targetColor\\n                            || img.getPixel(x - sx, y + sy) === targetColor\\n                            || img.getPixel(x + sx, y - sy) === targetColor\\n                            || img.getPixel(x - sx, y - sy) === targetColor\\n                            ) {\\n                            toOutlineX.push(x)\\n                            toOutlineY.push(y)\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        for (let i = 0; i < toOutlineX.length; i++) {\\n            const x = toOutlineX[i]\\n            const y = toOutlineY[i]\\n            img.setPixel(x, y, outlineColor)\\n        }\\n    }\\n}\"}","pxt.json":"{\n    \"name\": \"hiohigiti\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Color Fading\": \"github:jwunderl/pxt-color#v0.2.3\",\n        \"arcade-text\": \"github:microsoft/arcade-text#fa2439314c6633943666a763fdae32a5c67a9ae8\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"images.g.jres\",\n        \"images.g.ts\",\n        \"arcade-text.json\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v2.0.40\",\n        \"tag\": \"v2.0.40\",\n        \"commits\": \"https://github.com/microsoft/pxt-arcade/commits/e365009949b9c899fc4c9914e30e362bd22a209b\",\n        \"target\": \"2.0.40\",\n        \"pxt\": \"11.3.48\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1743642853491,"editorVersion":"2.0.46","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"dvTcdv}[P3B$Nm]uq.?%\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"zdS7Ok(2)NR/$N.CIo!P\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"o)zMb%HVOpXeS#=M2:fp\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"YJ}|PA0gm_X/h]D`}vDE\">Enemy</variable><variable type=\"KIND_SpriteKind\" id=\"|8hcqW}KO:2`Bs4AEA|u\">Text</variable><variable id=\"r1^/T{c+YRNM{]PumMsX\">pic</variable><variable id=\"sJV`S|Z~qk!A3s+R!L3!\">i</variable><variable id=\"Ei8DFZFwcYW#D;LsW:2t\">menuItems</variable><variable id=\"4YxK!y}(i!VH5obB2jlq\">selector</variable><variable id=\"(:V8354rRki(V0rE$U_|\">mySprite</variable><variable id=\"`T)sos;z-cxA$Z{WSnhV\">a</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menuItems: string[] = []\" numlines=\"1\" declaredvars=\"menuItems\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Initialize the menu_items array correctly</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let a = 0\" numlines=\"1\" declaredvars=\"a\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Text {\" line1=\"    x: number;\" line2=\"    y: number;\" line3=\"    text: TextSprite;\" line4=\"    width: number;\" line5=\"\" line6=\"    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, borderWidth: number = 0, z: number = 10) {\" line7=\"        // Coordinates and text parameters\" line8=\"        this.x = x;\" line9=\"        this.y = y;\" line10=\"        this.text = textsprite.create(text);\" line11=\"\" line12=\"        // Set text height, outline, Z index, and position\" line13=\"        this.text.setMaxFontHeight(height);\" line14=\"        this.text.setOutline(borderWidth, border);\" line15=\"        this.text.setPosition(x, y);\" line16=\"        this.text.z = z;\" line17=\"\" line18=\"        // Store the width of the text sprite\" line19=\"        this.width = this.text.width;\" line20=\"    }\" line21=\"\" line22=\"    // Method to set text position\" line23=\"    public setTextPosition(x: number, y: number): void {\" line24=\"        this.text.setPosition(x, y);\" line25=\"    }\" line26=\"\" line27=\"    // Getters for x and y\" line28=\"    public getX(): number {\" line29=\"        return this.text.x;\" line30=\"    }\" line31=\"\" line32=\"    public getY(): number {\" line33=\"        return this.text.y;\" line34=\"    }\" line35=\"}\" numlines=\"36\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Menu {\" line1=\"    menuItems: Text[];  // Declaring menuItems as an array of Text objects\" line2=\"\" line3=\"    constructor(items: string[], posX: number, posY: number) {\" line4=\"        let cursor = [screen.width/2, screen.height/2]; // Start at the center of the screen\" line5=\"        this.menuItems = []; // Initialize the menuItems array\" line6=\"\" line7=\"        // Create a new Text object for each menu item and position them vertically\" line8=\"        for (let item of items) {\" line9=\"            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\" line10=\"            cursor[1] += 10; // Adjust the vertical position for the next item\" line11=\"        }\" line12=\"    }\" line13=\"\" line14=\"    // Method to return the menu items\" line15=\"    public returnMenu(): Text[] {\" line16=\"        return this.menuItems;\" line17=\"    }\" line18=\"}\" numlines=\"19\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"r1^/T{c+YRNM{]PumMsX\">pic</field><comment pinned=\"false\" h=\"80\" w=\"160\">Example usage:</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"scenescreenwidth\"></block></value><value name=\"height\"><block type=\"scenescreenheight\"></block></value></block></value><next><block type=\"Image_fillRect\"><comment pinned=\"false\" h=\"80\" w=\"160\">Fill the background</comment><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"r1^/T{c+YRNM{]PumMsX\">pic</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"scenescreenwidth\"></block></value><value name=\"h\"><block type=\"scenescreenheight\"></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">0</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"r1^/T{c+YRNM{]PumMsX\">pic</field></block></value><next><block type=\"pxt_controls_for\"><value name=\"VAR\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"sJV`S|Z~qk!A3s+R!L3!\">i</field></block></value><value name=\"TO\"><shadow type=\"math_whole_number\"><field name=\"NUM\">5</field></shadow></value><statement name=\"DO\"><block type=\"array_push\"><comment pinned=\"false\" h=\"80\" w=\"160\">Using a 1-based index for better display</comment><value name=\"list\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Ei8DFZFwcYW#D;LsW:2t\">menuItems</field></block></value><value name=\"value\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">`${i}`</field></block></value></block></statement><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menu = new Menu(menuItems, 50, 10);\" numlines=\"1\" declaredvars=\"menu\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"spritedestroy2\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"`T)sos;z-cxA$Z{WSnhV\">a</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"let a = 0\n// Initialize the menu_items array correctly\nlet menuItems: string[] = []\nclass Text {\n    x: number;\n    y: number;\n    text: TextSprite;\n    width: number;\n\n    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, borderWidth: number = 0, z: number = 10) {\n        // Coordinates and text parameters\n        this.x = x;\n        this.y = y;\n        this.text = textsprite.create(text);\n\n        // Set text height, outline, Z index, and position\n        this.text.setMaxFontHeight(height);\n        this.text.setOutline(borderWidth, border);\n        this.text.setPosition(x, y);\n        this.text.z = z;\n\n        // Store the width of the text sprite\n        this.width = this.text.width;\n    }\n\n    // Method to set text position\n    public setTextPosition(x: number, y: number): void {\n        this.text.setPosition(x, y);\n    }\n\n    // Getters for x and y\n    public getX(): number {\n        return this.text.x;\n    }\n\n    public getY(): number {\n        return this.text.y;\n    }\n}\nclass Menu {\n    menuItems: Text[];  // Declaring menuItems as an array of Text objects\n    selector: number;\n    posX: number;\n    posY: number;\n    constructor(items: string[], posX: number, posY: number) {\n        let cursor = [posX, posY]; // Start at the center of the screen\n        this.menuItems = []; // Initialize the menuItems array\n        this.selector = 0;\n        this.posX = posX;\n        this.posY = posY;\n\n        // Create a new Text object for each menu item and position them vertically\n        for (let item of items) {\n            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\n            cursor[1] += 10; // Adjust the vertical position for the next item\n        }\n\n        \n    }\n\n    public moveMenu(posX: number, posY: number): void {\n        \n        for (let item of items) {\n            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\n            cursor[1] += 10; // Adjust the vertical position for the next item\n        }\n    }\n\n    public select(n: number): void {\n        this.menuItems[n].setTextPosition(this.posX, this.posY)\n    }\n\n    // Method to return the menu items\n    public returnMenu(): Text[] {\n        return this.menuItems;\n    }\n}\n\n// Example usage:\nlet pic = image.create(scene.screenWidth(), scene.screenHeight())\n// Fill the background\npic.fillRect(0, 0, scene.screenWidth(), scene.screenHeight(), 0)\nscene.setBackgroundImage(pic)\nfor (let i = 0; i <= 5; i++) {\n    // Using a 1-based index for better display\n    menuItems.push(`${i}`)\n}\nlet menu = new Menu(menuItems, 50, 10);\n\nmenu.select(4)\n\n// let selector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height)\n// selector.fillRect(0, 0, menu.menuItems[a].text.width, menu.menuItems[a].text.height, 2)\n// let mySprite = sprites.create(selector, SpriteKind.Player)\n// mySprite.setPosition(menu.menuItems[a].text.x, menu.menuItems[a].text.y)\n// pause(1000)\n// sprites.destroy(mySprite)\n// a = 4\n// selector = image.create(menu.menuItems[a].text.width, menu.menuItems[a].text.height)\n// selector.fillRect(0, 0, menu.menuItems[a].text.width, menu.menuItems[a].text.height, 2)\n// mySprite = sprites.create(selector, SpriteKind.Player)\n// mySprite.setPosition(menu.menuItems[a].text.x, menu.menuItems[a].text.y)\n","README.md":" ","assets.json":"","main.py":"class Text:\n    def __init__(self, x: int, y: int, text: str, height: int = 1, border: int = 1, border_width: int = 0):\n        # Coordinates and text parameters\n        self.x = x\n        self.y = y\n        self.text = textsprite.create(text)  # Assuming textsprite.create() returns a text sprite object\n        \n        # Setting text height, outline, and position\n        self.text.set_max_font_height(height)\n        self.text.set_outline(border_width, border)\n        self.text.set_position(x, y)\n        \n        # Storing width of the text sprite\n        self.width = self.text.width\n\n\n    def setTextPosition(self, x, y):\n        self.text.set_position(x, y)\n\n    def getX(self):\n        return self.text.x\n\n    def getY(self):\n        return self.text.y\n\nclass Menu:\n    def __init__(self, items):\n        cursor = [scene.screen_width()/2, 10]\n        self.menu_items = []\n        for item in items:\n            self.menu_items.append(Text(cursor[0], cursor[1], item))\n            cursor[1] += 10\n    \n    def returnMenu(self):\n        return menu_items\n\npic = image.create(scene.screen_width(), scene.screen_height())\npic.fill_rect(0, 0, scene.screen_width(), scene.screen_height(), 16)\nscene.set_background_image(pic)\n\nmenu_items = []\nfor i in range(10):\n    menu_items.append(\"Option \" + str(i))\n\nmenu = Menu(menu_items)\n\nmenu.menu_items[1]\n\n\n# selector = image.create(menu.menu_items[1].text.width(), menu.menu_items[1].text.height())\n\n# hi = Text(scene.screen_width()/2, 10, \"Hi\")\n# bye = Text(scene.screen_width()/2, scene.screen_height()/2, \"Bye\")\n","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAJAJAAAAAAAAmQkAAAAAAAAJCQAAAAAAAJAJAAAAAAAAkAkAAAAAAACZAAAAAAAAAJAAAAAAAAAAmQAAAAAAAACZAAAAAAAAAJkAAAAAAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage0\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","arcade-text.json":"{\"README.md\":\"# Text Sprite ![Build status badge](https://github.com/microsoft/arcade-text/workflows/MakeCode/badge.svg)\\n\\n## Usage\\n\\nThis extension allows you to create \\\"text sprites\\\" which are just sprites created with the visual appearance of text. All standard behavior and APIs for sprites apply to them. In addition, the Text Sprite extension has helpful blocks for working with and changing the appearance of text sprites.\\n\\nNote that when unicode characters are in use, the font height used in text sprites will always be a multiple of 12px. Whereas otherwise we prefer to use multiples of height 8px or 5px fonts.\\n\\n<img width=\\\"416\\\" alt=\\\"Screen Shot 2020-08-20 at 8 00 21 AM\\\" src=\\\"https://user-images.githubusercontent.com/6453828/90789027-40137480-e2bb-11ea-81bd-440fa19abdc0.png\\\">\\n\\n## Use this extension\\n\\nThis repository can be added as an **extension** in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **New Project**\\n* click on **Extensions** under the gearwheel menu\\n* search for the URL of this repository and import\\n\\n## Edit this extension\\n\\nTo edit this repository in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **Import** then click on **Import URL**\\n* paste the repository URL and click import\\n\\n## Blocks preview\\n\\nThis image shows the blocks code from the last commit in master.\\nThis image may take a few minutes to refresh.\\n\\n![A rendered view of the blocks](https://github.com/microsoft/arcade-text/raw/master/.makecode/blocks.png)\\n\\n## Supported targets\\n\\n* for PXT/arcade\\n* for PXT/arcade\\n(The metadata above is needed for package search.)\\n\\n# Contributing\\n\\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\\n\\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\\nprovided by the bot. You will only need to do this once across all repos using our CLA.\\n\\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\\n\",\"main.blocks\":\"<xml xmlns=\\\"https://developers.google.com/blockly/xml\\\"><block type=\\\"pxt-on-start\\\" id=\\\"6Y6q)ncpNy{?8D%D=cv?\\\" x=\\\"0\\\" y=\\\"0\\\"/></xml>\",\"main.ts\":\"\\n\",\"pxt.json\":\"{\\n    \\\"name\\\": \\\"arcade-text\\\",\\n    \\\"version\\\": \\\"1.3.0\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"dependencies\\\": {\\n        \\\"device\\\": \\\"*\\\",\\n        \\\"hw---samd51\\\": \\\"*\\\"\\n    },\\n    \\\"files\\\": [\\n        \\\"main.blocks\\\",\\n        \\\"main.ts\\\",\\n        \\\"README.md\\\",\\n        \\\"text.ts\\\"\\n    ],\\n    \\\"testFiles\\\": [\\n        \\\"test.ts\\\"\\n    ],\\n    \\\"targetVersions\\\": {\\n        \\\"target\\\": \\\"1.2.6\\\",\\n        \\\"targetId\\\": \\\"arcade\\\"\\n    },\\n    \\\"supportedTargets\\\": [\\n        \\\"arcade\\\"\\n    ],\\n    \\\"preferredEditor\\\": \\\"tsprj\\\"\\n}\\n\",\"test.ts\":\"// tests go here; this will not be compiled when this package is used as an extension.\\nlet s3: TextSprite = null\\nlet s2: TextSprite = null\\nlet s1: TextSprite = null\\ninfo.setScore(99999)\\ninfo.setLife(5)\\nlet heights = [5, 8, 12, 24]\\nlet y = 24\\nfor (let h of heights) {\\n    s1 = textsprite.create(\\\"水\\\", 9, 8)\\n    s1.setBorder(1, 6, 1)\\n    s1.setMaxFontHeight(h)\\n    s1.setOutline(1, 1)\\n    s1.left = 2\\n    s1.top = y\\n    s2 = textsprite.create(\\\"h\\\" + h)\\n    s2.setMaxFontHeight(h)\\n    s2.setOutline(1, 6)\\n    s2.left = 36\\n    s2.top = y\\n    s3 = textsprite.create(\\\"x\\\" + \\\"99\\\", 1, 3)\\n    s3.setBorder(1, 3, 1)\\n    s3.setMaxFontHeight(h)\\n    s3.setIcon(img`\\n        . . 8 . .\\n        . . 8 . .\\n        . 8 8 8 .\\n        8 8 9 8 .\\n        8 9 1 8 .\\n        8 9 1 9 8\\n        8 8 9 9 8\\n        . 8 8 8 .\\n    `)\\n    s3.left = 92\\n    s3.top = y\\n    y += Math.max(s1.height, s2.height) + 2\\n}\\n\",\"text.ts\":\"namespace SpriteKind {\\n    //% isKind\\n    export const Text = SpriteKind.create();\\n}\\n\\n//% blockNamespace=\\\"textsprite\\\"\\n//% blockGap=8\\nclass TextSprite extends Sprite {\\n    constructor(\\n        public text: string,\\n        public bg: number,\\n        public fg: number,\\n        public maxFontHeight: number,\\n        public borderWidth: number,\\n        public borderColor: number,\\n        public padding: number,\\n        public outlineWidth: number,\\n        public outlineColor: number,\\n        public icon: Image = null,\\n    ) {\\n        super(image.create(0,0));\\n        this.setKind(SpriteKind.Text);\\n        this.setFlag(SpriteFlag.Ghost, true);\\n        this.update()\\n    }\\n\\n    public update() {\\n        const borderAndPadding = this.borderWidth + this.padding + this.outlineWidth;\\n        const iconWidth = this.icon ? this.icon.width + this.padding + this.outlineWidth : 0;\\n        const iconHeight = this.icon ? this.icon.height : 0;\\n        const font = textsprite.getFontForTextAndHeight(this.text, this.maxFontHeight);        \\n        const width = iconWidth + font.charWidth * this.text.length + 2 * borderAndPadding;\\n        const height = Math.max(iconHeight, font.charHeight) + 2 * borderAndPadding;\\n        const img = image.create(width, height);\\n        img.fill(this.borderColor);\\n        img.fillRect(this.borderWidth, this.borderWidth, width - this.borderWidth * 2, height - this.borderWidth * 2, this.bg)\\n        if (this.icon) {\\n            const iconHeightOffset = (height - iconHeight) / 2\\n            textsprite.renderScaledImage(this.icon, img, borderAndPadding, iconHeightOffset)\\n        }\\n        const textHeightOffset = (height - font.charHeight) / 2\\n        img.print(this.text, iconWidth + borderAndPadding, textHeightOffset, this.fg, font);\\n        if (this.outlineWidth > 0)\\n            textsprite.outlineOtherColor(img, this.fg, this.outlineWidth, this.outlineColor)\\n        this.setImage(img)        \\n    }\\n\\n    //% block=\\\"set $this(textSprite) max font height $height\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=50\\n    public setMaxFontHeight(height: number) {\\n        this.maxFontHeight = height\\n        this.update();\\n    }\\n\\n    //% block=\\\"set $this(textSprite) icon $icon=screen_image_picker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=46\\n    public setIcon(icon: Image) {\\n        this.icon = icon\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) text $text\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=47\\n    public setText(text: string) {\\n        this.text = text || \\\"\\\"\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) border $width $color || and padding $padding\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=48\\n    public setBorder(width: number, color: number, padding: number = 0) {\\n        this.borderWidth = Math.max(width, 0);\\n        this.borderColor = color;\\n        this.padding = Math.max(padding, 0);\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) outline $width $color\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=49\\n    public setOutline(width: number, color: number) {\\n        this.outlineWidth = Math.max(width, 0);\\n        this.outlineColor = color;\\n        this.update();\\n    }\\n}\\n\\n//% color=#3e99de\\n//% icon=\\\"\\\\uf031\\\"\\n//% blockGap=8 block=\\\"Text Sprite\\\"\\n//% groups='[\\\"Create\\\", \\\"Modify\\\"]'\\nnamespace textsprite {\\n\\n    // TODO: downscale and upscale icons?\\n    export function renderScaledImage(source: Image, destination: Image, x: number, y: number, downScalePowerOfTwo: number = 0) {\\n        const scale = downScalePowerOfTwo;\\n        const tile = source\\n        for (let i = 0; i < source.width; i += 1 << scale) {\\n            for (let j = 0; j < source.height; j += 1 << scale) {\\n                if (source.getPixel(i, j) != 0) {\\n                    destination.setPixel(x + (i >> scale), y + (j >> scale), source.getPixel(i, j))\\n                }\\n            }\\n        }\\n    }\\n\\n    export function getFontForTextAndHeight(text: string, maxHeight: number): image.Font {\\n        const baseFont = image.getFontForText(text)\\n        const hasUnicode = baseFont.charHeight === 12  // this is a hack\\n        const availableFonts: image.Font[] = hasUnicode \\n            ? [baseFont] \\n            : [image.font8, image.font5] // 8 and 5 are generally better fonts than 12\\n        const remainders = availableFonts.map(s => maxHeight % s.charHeight)\\n        const fontIdx = remainders.reduce((p, n, i) => remainders[p] <= n ? p : i, 99)\\n        const font = availableFonts[fontIdx]\\n        return image.scaledFont(font, maxHeight / font.charHeight)\\n    }\\n\\n    //% block=\\\"text sprite $text || as $fg on $bg\\\"\\n    //% blockId=\\\"textsprite_create\\\"\\n    //% blockSetVariable=\\\"textSprite\\\"\\n    //% expandableArgumentMode=\\\"toggle\\\"\\n    //% bg.defl=0\\n    //% bg.shadow=\\\"colorindexpicker\\\"\\n    //% fg.defl=1\\n    //% fg.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Create\\\"\\n    //% weight=100\\n    export function create(\\n        text: string,\\n        bg: number = 0,\\n        fg: number = 1,\\n    ): TextSprite {\\n        const sprite = new TextSprite(text, bg, fg, 8, 0, 0, 0, 0, 0);\\n        game.currentScene().physicsEngine.addSprite(sprite);\\n        return sprite;\\n    }\\n\\n    export function outlineOtherColor(img: Image, targetColor: number, outlineWidth: number, outlineColor: number) {\\n        let toOutlineX: number[] = [];\\n        let toOutlineY: number[] = [];\\n        for (let x = 0; x < img.width; x++) {\\n            for (let y = 0; y < img.height; y++) {\\n                for (let sx = 0; sx <= outlineWidth; sx++) {\\n                    for (let sy = 0; sy <= outlineWidth; sy++) {\\n                        if (sx + sy === 0)\\n                            continue;\\n                        if (img.getPixel(x, y) === targetColor)\\n                            continue\\n                        if (img.getPixel(x + sx, y + sy) === targetColor\\n                            || img.getPixel(x - sx, y + sy) === targetColor\\n                            || img.getPixel(x + sx, y - sy) === targetColor\\n                            || img.getPixel(x - sx, y - sy) === targetColor\\n                            ) {\\n                            toOutlineX.push(x)\\n                            toOutlineY.push(y)\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        for (let i = 0; i < toOutlineX.length; i++) {\\n            const x = toOutlineX[i]\\n            const y = toOutlineY[i]\\n            img.setPixel(x, y, outlineColor)\\n        }\\n    }\\n}\"}","pxt.json":"{\n    \"name\": \"hiohigiti\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Color Fading\": \"github:jwunderl/pxt-color#v0.2.3\",\n        \"arcade-text\": \"github:microsoft/arcade-text#fa2439314c6633943666a763fdae32a5c67a9ae8\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"images.g.jres\",\n        \"images.g.ts\",\n        \"arcade-text.json\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v2.0.40\",\n        \"tag\": \"v2.0.40\",\n        \"commits\": \"https://github.com/microsoft/pxt-arcade/commits/e365009949b9c899fc4c9914e30e362bd22a209b\",\n        \"target\": \"2.0.40\",\n        \"pxt\": \"11.3.48\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1743644657745,"editorVersion":"2.0.46","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"KIND_SpriteKind\" id=\"dvTcdv}[P3B$Nm]uq.?%\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"zdS7Ok(2)NR/$N.CIo!P\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"o)zMb%HVOpXeS#=M2:fp\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"YJ}|PA0gm_X/h]D`}vDE\">Enemy</variable><variable type=\"KIND_SpriteKind\" id=\"|8hcqW}KO:2`Bs4AEA|u\">Text</variable><variable id=\"r1^/T{c+YRNM{]PumMsX\">pic</variable><variable id=\"sJV`S|Z~qk!A3s+R!L3!\">i</variable><variable id=\"Ei8DFZFwcYW#D;LsW:2t\">menuItems</variable><variable id=\"4YxK!y}(i!VH5obB2jlq\">selector</variable><variable id=\"(:V8354rRki(V0rE$U_|\">mySprite</variable><variable id=\"`T)sos;z-cxA$Z{WSnhV\">a</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menuItems: string[] = []\" numlines=\"1\" declaredvars=\"menuItems\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Initialize the menu_items array correctly</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let a = 0\" numlines=\"1\" declaredvars=\"a\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Text {\" line1=\"    x: number;\" line2=\"    y: number;\" line3=\"    text: TextSprite;\" line4=\"    width: number;\" line5=\"\" line6=\"    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, borderWidth: number = 0, z: number = 10) {\" line7=\"        // Coordinates and text parameters\" line8=\"        this.x = x;\" line9=\"        this.y = y;\" line10=\"        this.text = textsprite.create(text);\" line11=\"\" line12=\"        // Set text height, outline, Z index, and position\" line13=\"        this.text.setMaxFontHeight(height);\" line14=\"        this.text.setOutline(borderWidth, border);\" line15=\"        this.text.setPosition(x, y);\" line16=\"        this.text.z = z;\" line17=\"\" line18=\"        // Store the width of the text sprite\" line19=\"        this.width = this.text.width;\" line20=\"    }\" line21=\"\" line22=\"    // Method to set text position\" line23=\"    public setTextPosition(x: number, y: number): void {\" line24=\"        this.text.setPosition(x, y);\" line25=\"    }\" line26=\"\" line27=\"    // Getters for x and y\" line28=\"    public getX(): number {\" line29=\"        return this.text.x;\" line30=\"    }\" line31=\"\" line32=\"    public getY(): number {\" line33=\"        return this.text.y;\" line34=\"    }\" line35=\"}\" numlines=\"36\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Menu {\" line1=\"    menuItems: Text[];  // Declaring menuItems as an array of Text objects\" line2=\"\" line3=\"    constructor(items: string[], posX: number, posY: number) {\" line4=\"        let cursor = [screen.width/2, screen.height/2]; // Start at the center of the screen\" line5=\"        this.menuItems = []; // Initialize the menuItems array\" line6=\"\" line7=\"        // Create a new Text object for each menu item and position them vertically\" line8=\"        for (let item of items) {\" line9=\"            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\" line10=\"            cursor[1] += 10; // Adjust the vertical position for the next item\" line11=\"        }\" line12=\"    }\" line13=\"\" line14=\"    // Method to return the menu items\" line15=\"    public returnMenu(): Text[] {\" line16=\"        return this.menuItems;\" line17=\"    }\" line18=\"}\" numlines=\"19\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"r1^/T{c+YRNM{]PumMsX\">pic</field><comment pinned=\"false\" h=\"80\" w=\"160\">Example usage:</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"scenescreenwidth\"></block></value><value name=\"height\"><block type=\"scenescreenheight\"></block></value></block></value><next><block type=\"Image_fillRect\"><comment pinned=\"false\" h=\"80\" w=\"160\">Fill the background</comment><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"r1^/T{c+YRNM{]PumMsX\">pic</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"scenescreenwidth\"></block></value><value name=\"h\"><block type=\"scenescreenheight\"></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">0</field></shadow></value><next><block type=\"gamesetbackgroundimage\"><value name=\"img\"><shadow type=\"background_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"r1^/T{c+YRNM{]PumMsX\">pic</field></block></value><next><block type=\"pxt_controls_for\"><value name=\"VAR\"><block type=\"variables_get_reporter\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"sJV`S|Z~qk!A3s+R!L3!\">i</field></block></value><value name=\"TO\"><shadow type=\"math_whole_number\"><field name=\"NUM\">5</field></shadow></value><statement name=\"DO\"><block type=\"array_push\"><comment pinned=\"false\" h=\"80\" w=\"160\">Using a 1-based index for better display</comment><value name=\"list\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Ei8DFZFwcYW#D;LsW:2t\">menuItems</field></block></value><value name=\"value\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">`${i}`</field></block></value></block></statement><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let menu = new Menu(menuItems, 50, 10);\" numlines=\"1\" declaredvars=\"menu\"></mutation><next><block type=\"variables_set\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"spritedestroy2\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><field name=\"effect\">effects.spray</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"`T)sos;z-cxA$Z{WSnhV\">a</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"image_create\"><value name=\"width\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"height\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value></block></value><next><block type=\"Image_fillRect\"><value name=\"picture\"><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"w\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.width</field></block></value><value name=\"h\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text.height</field></block></value><value name=\"c\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"4YxK!y}(i!VH5obB2jlq\">selector</field></block></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"spritesetpos\"><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"(:V8354rRki(V0rE$U_|\">mySprite</field></block></value><value name=\"x\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.x</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value><value name=\"y\"><shadow type=\"positionPicker\"><field name=\"index\">0</field></shadow><block type=\"Sprite_blockCombine_get\"><field name=\"property\">Sprite.y</field><value name=\"mySprite\"><block type=\"typescript_expression\"><field name=\"EXPRESSION\">menu.menuItems[a].text</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"let a = 0\n// Initialize the menu_items array correctly\nlet menuItems: string[] = []\nclass Text {\n    x: number;\n    y: number;\n    text: TextSprite;\n    width: number;\n\n    constructor(x: number, y: number, text: string, height: number = 1, border: number = 1, borderWidth: number = 0, z: number = 10) {\n        // Coordinates and text parameters\n        this.x = x;\n        this.y = y;\n        this.text = textsprite.create(text);\n\n        // Set text height, outline, Z index, and position\n        this.text.setMaxFontHeight(height);\n        this.text.setOutline(borderWidth, border);\n        this.text.setPosition(x, y);\n        this.text.z = z;\n\n        // Store the width of the text sprite\n        this.width = this.text.width;\n    }\n\n    // Method to set text position\n    public setTextPosition(x: number, y: number): void {\n        this.text.setPosition(x, y);\n    }\n\n    // Getters for x and y\n    public getX(): number {\n        return this.text.x;\n    }\n\n    public getY(): number {\n        return this.text.y;\n    }\n}\nclass Menu {\n    menuItems: Text[];  // Declaring menuItems as an array of Text objects\n    selector: number;\n    posX: number;\n    posY: number;\n    menuLength: number;\n    constructor(items: string[], posX: number, posY: number) {\n        let cursor = [posX, posY]; // Start at the center of the screen\n        this.menuLength = items.length;\n        this.menuItems = []; // Initialize the menuItems array\n        this.selector = 0;\n        this.posX = posX;\n        this.posY = posY;\n\n        // Create a new Text object for each menu item and position them vertically\n        for (let item of items) {\n            this.menuItems.push(new Text(cursor[0], cursor[1], item, 1, 1, 0, 10));\n            cursor[1] += 10; // Adjust the vertical position for the next item\n        }\n\n        \n    }\n\n    public moveMenu(posX: number, posY: number): void {\n        let cursor = [posX, posY];\n        for (let item = 0; item < this.menuItems.length; item++) {\n            this.menuItems[item].setTextPosition(cursor[0], cursor[1]);\n            cursor[1] += 10; // Adjust the vertical position for the next item\n        }\n    }\n\n    public select(n: number): void { \n        let cursor = [this.menuItems[n].x, this.posY + (this.posY - this.menuItems[n].y)];\n        for (let item = 0; item < this.menuItems.length; item++) {\n            this.menuItems[item].setTextPosition(cursor[0], cursor[1]);\n            cursor[1] += 10; // Adjust the vertical position for the next item\n        }\n    }\n\n    // Method to return the menu items\n    public returnMenu(): Text[] {\n        return this.menuItems;\n    }\n}\n\n// Example usage:\nlet pic = image.create(scene.screenWidth(), scene.screenHeight())\n// Fill the background\npic.fillRect(0, 0, scene.screenWidth(), scene.screenHeight(), 0)\nscene.setBackgroundImage(pic)\nfor (let i = 0; i <= 20; i++) {\n    // Using a 1-based index for better display\n    menuItems.push(`${i}`)\n}\nlet menu = new Menu(menuItems, screen.width/2, screen.height/2);\n\nlet n = 0\n\nforever(function() {\n    \n    if (controller.up.isPressed()) {\n        n ++;\n    }\n    if (controller.down.isPressed() && n < menu.menuLength-1) {\n        n--;\n    }\n    menu.select(n);\n    console.log(n);\n})\n\n","README.md":" ","assets.json":"","main.py":"class Text:\n    def __init__(self, x: int, y: int, text: str, height: int = 1, border: int = 1, border_width: int = 0):\n        # Coordinates and text parameters\n        self.x = x\n        self.y = y\n        self.text = textsprite.create(text)  # Assuming textsprite.create() returns a text sprite object\n        \n        # Setting text height, outline, and position\n        self.text.set_max_font_height(height)\n        self.text.set_outline(border_width, border)\n        self.text.set_position(x, y)\n        \n        # Storing width of the text sprite\n        self.width = self.text.width\n\n\n    def setTextPosition(self, x, y):\n        self.text.set_position(x, y)\n\n    def getX(self):\n        return self.text.x\n\n    def getY(self):\n        return self.text.y\n\nclass Menu:\n    def __init__(self, items):\n        cursor = [scene.screen_width()/2, 10]\n        self.menu_items = []\n        for item in items:\n            self.menu_items.append(Text(cursor[0], cursor[1], item))\n            cursor[1] += 10\n    \n    def returnMenu(self):\n        return menu_items\n\npic = image.create(scene.screen_width(), scene.screen_height())\npic.fill_rect(0, 0, scene.screen_width(), scene.screen_height(), 16)\nscene.set_background_image(pic)\n\nmenu_items = []\nfor i in range(10):\n    menu_items.append(\"Option \" + str(i))\n\nmenu = Menu(menu_items)\n\nmenu.menu_items[1]\n\n\n# selector = image.create(menu.menu_items[1].text.width(), menu.menu_items[1].text.height())\n\n# hi = Text(scene.screen_width()/2, 10, \"Hi\")\n# bye = Text(scene.screen_width()/2, scene.screen_height()/2, \"Bye\")\n","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAJAJAAAAAAAAmQkAAAAAAAAJCQAAAAAAAJAJAAAAAAAAkAkAAAAAAACZAAAAAAAAAJAAAAAAAAAAmQAAAAAAAACZAAAAAAAAAJkAAAAAAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"myImage0\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","arcade-text.json":"{\"README.md\":\"# Text Sprite ![Build status badge](https://github.com/microsoft/arcade-text/workflows/MakeCode/badge.svg)\\n\\n## Usage\\n\\nThis extension allows you to create \\\"text sprites\\\" which are just sprites created with the visual appearance of text. All standard behavior and APIs for sprites apply to them. In addition, the Text Sprite extension has helpful blocks for working with and changing the appearance of text sprites.\\n\\nNote that when unicode characters are in use, the font height used in text sprites will always be a multiple of 12px. Whereas otherwise we prefer to use multiples of height 8px or 5px fonts.\\n\\n<img width=\\\"416\\\" alt=\\\"Screen Shot 2020-08-20 at 8 00 21 AM\\\" src=\\\"https://user-images.githubusercontent.com/6453828/90789027-40137480-e2bb-11ea-81bd-440fa19abdc0.png\\\">\\n\\n## Use this extension\\n\\nThis repository can be added as an **extension** in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **New Project**\\n* click on **Extensions** under the gearwheel menu\\n* search for the URL of this repository and import\\n\\n## Edit this extension\\n\\nTo edit this repository in MakeCode.\\n\\n* open https://arcade.makecode.com/\\n* click on **Import** then click on **Import URL**\\n* paste the repository URL and click import\\n\\n## Blocks preview\\n\\nThis image shows the blocks code from the last commit in master.\\nThis image may take a few minutes to refresh.\\n\\n![A rendered view of the blocks](https://github.com/microsoft/arcade-text/raw/master/.makecode/blocks.png)\\n\\n## Supported targets\\n\\n* for PXT/arcade\\n* for PXT/arcade\\n(The metadata above is needed for package search.)\\n\\n# Contributing\\n\\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\\n\\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\\nprovided by the bot. You will only need to do this once across all repos using our CLA.\\n\\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\\n\",\"main.blocks\":\"<xml xmlns=\\\"https://developers.google.com/blockly/xml\\\"><block type=\\\"pxt-on-start\\\" id=\\\"6Y6q)ncpNy{?8D%D=cv?\\\" x=\\\"0\\\" y=\\\"0\\\"/></xml>\",\"main.ts\":\"\\n\",\"pxt.json\":\"{\\n    \\\"name\\\": \\\"arcade-text\\\",\\n    \\\"version\\\": \\\"1.3.0\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"dependencies\\\": {\\n        \\\"device\\\": \\\"*\\\",\\n        \\\"hw---samd51\\\": \\\"*\\\"\\n    },\\n    \\\"files\\\": [\\n        \\\"main.blocks\\\",\\n        \\\"main.ts\\\",\\n        \\\"README.md\\\",\\n        \\\"text.ts\\\"\\n    ],\\n    \\\"testFiles\\\": [\\n        \\\"test.ts\\\"\\n    ],\\n    \\\"targetVersions\\\": {\\n        \\\"target\\\": \\\"1.2.6\\\",\\n        \\\"targetId\\\": \\\"arcade\\\"\\n    },\\n    \\\"supportedTargets\\\": [\\n        \\\"arcade\\\"\\n    ],\\n    \\\"preferredEditor\\\": \\\"tsprj\\\"\\n}\\n\",\"test.ts\":\"// tests go here; this will not be compiled when this package is used as an extension.\\nlet s3: TextSprite = null\\nlet s2: TextSprite = null\\nlet s1: TextSprite = null\\ninfo.setScore(99999)\\ninfo.setLife(5)\\nlet heights = [5, 8, 12, 24]\\nlet y = 24\\nfor (let h of heights) {\\n    s1 = textsprite.create(\\\"水\\\", 9, 8)\\n    s1.setBorder(1, 6, 1)\\n    s1.setMaxFontHeight(h)\\n    s1.setOutline(1, 1)\\n    s1.left = 2\\n    s1.top = y\\n    s2 = textsprite.create(\\\"h\\\" + h)\\n    s2.setMaxFontHeight(h)\\n    s2.setOutline(1, 6)\\n    s2.left = 36\\n    s2.top = y\\n    s3 = textsprite.create(\\\"x\\\" + \\\"99\\\", 1, 3)\\n    s3.setBorder(1, 3, 1)\\n    s3.setMaxFontHeight(h)\\n    s3.setIcon(img`\\n        . . 8 . .\\n        . . 8 . .\\n        . 8 8 8 .\\n        8 8 9 8 .\\n        8 9 1 8 .\\n        8 9 1 9 8\\n        8 8 9 9 8\\n        . 8 8 8 .\\n    `)\\n    s3.left = 92\\n    s3.top = y\\n    y += Math.max(s1.height, s2.height) + 2\\n}\\n\",\"text.ts\":\"namespace SpriteKind {\\n    //% isKind\\n    export const Text = SpriteKind.create();\\n}\\n\\n//% blockNamespace=\\\"textsprite\\\"\\n//% blockGap=8\\nclass TextSprite extends Sprite {\\n    constructor(\\n        public text: string,\\n        public bg: number,\\n        public fg: number,\\n        public maxFontHeight: number,\\n        public borderWidth: number,\\n        public borderColor: number,\\n        public padding: number,\\n        public outlineWidth: number,\\n        public outlineColor: number,\\n        public icon: Image = null,\\n    ) {\\n        super(image.create(0,0));\\n        this.setKind(SpriteKind.Text);\\n        this.setFlag(SpriteFlag.Ghost, true);\\n        this.update()\\n    }\\n\\n    public update() {\\n        const borderAndPadding = this.borderWidth + this.padding + this.outlineWidth;\\n        const iconWidth = this.icon ? this.icon.width + this.padding + this.outlineWidth : 0;\\n        const iconHeight = this.icon ? this.icon.height : 0;\\n        const font = textsprite.getFontForTextAndHeight(this.text, this.maxFontHeight);        \\n        const width = iconWidth + font.charWidth * this.text.length + 2 * borderAndPadding;\\n        const height = Math.max(iconHeight, font.charHeight) + 2 * borderAndPadding;\\n        const img = image.create(width, height);\\n        img.fill(this.borderColor);\\n        img.fillRect(this.borderWidth, this.borderWidth, width - this.borderWidth * 2, height - this.borderWidth * 2, this.bg)\\n        if (this.icon) {\\n            const iconHeightOffset = (height - iconHeight) / 2\\n            textsprite.renderScaledImage(this.icon, img, borderAndPadding, iconHeightOffset)\\n        }\\n        const textHeightOffset = (height - font.charHeight) / 2\\n        img.print(this.text, iconWidth + borderAndPadding, textHeightOffset, this.fg, font);\\n        if (this.outlineWidth > 0)\\n            textsprite.outlineOtherColor(img, this.fg, this.outlineWidth, this.outlineColor)\\n        this.setImage(img)        \\n    }\\n\\n    //% block=\\\"set $this(textSprite) max font height $height\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=50\\n    public setMaxFontHeight(height: number) {\\n        this.maxFontHeight = height\\n        this.update();\\n    }\\n\\n    //% block=\\\"set $this(textSprite) icon $icon=screen_image_picker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=46\\n    public setIcon(icon: Image) {\\n        this.icon = icon\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) text $text\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=47\\n    public setText(text: string) {\\n        this.text = text || \\\"\\\"\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) border $width $color || and padding $padding\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=48\\n    public setBorder(width: number, color: number, padding: number = 0) {\\n        this.borderWidth = Math.max(width, 0);\\n        this.borderColor = color;\\n        this.padding = Math.max(padding, 0);\\n        this.update()\\n    }\\n\\n    //% block=\\\"set $this(textSprite) outline $width $color\\\"\\n    //% width.defl=1\\n    //% color.defl=6\\n    //% color.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Modify\\\"\\n    //% weight=49\\n    public setOutline(width: number, color: number) {\\n        this.outlineWidth = Math.max(width, 0);\\n        this.outlineColor = color;\\n        this.update();\\n    }\\n}\\n\\n//% color=#3e99de\\n//% icon=\\\"\\\\uf031\\\"\\n//% blockGap=8 block=\\\"Text Sprite\\\"\\n//% groups='[\\\"Create\\\", \\\"Modify\\\"]'\\nnamespace textsprite {\\n\\n    // TODO: downscale and upscale icons?\\n    export function renderScaledImage(source: Image, destination: Image, x: number, y: number, downScalePowerOfTwo: number = 0) {\\n        const scale = downScalePowerOfTwo;\\n        const tile = source\\n        for (let i = 0; i < source.width; i += 1 << scale) {\\n            for (let j = 0; j < source.height; j += 1 << scale) {\\n                if (source.getPixel(i, j) != 0) {\\n                    destination.setPixel(x + (i >> scale), y + (j >> scale), source.getPixel(i, j))\\n                }\\n            }\\n        }\\n    }\\n\\n    export function getFontForTextAndHeight(text: string, maxHeight: number): image.Font {\\n        const baseFont = image.getFontForText(text)\\n        const hasUnicode = baseFont.charHeight === 12  // this is a hack\\n        const availableFonts: image.Font[] = hasUnicode \\n            ? [baseFont] \\n            : [image.font8, image.font5] // 8 and 5 are generally better fonts than 12\\n        const remainders = availableFonts.map(s => maxHeight % s.charHeight)\\n        const fontIdx = remainders.reduce((p, n, i) => remainders[p] <= n ? p : i, 99)\\n        const font = availableFonts[fontIdx]\\n        return image.scaledFont(font, maxHeight / font.charHeight)\\n    }\\n\\n    //% block=\\\"text sprite $text || as $fg on $bg\\\"\\n    //% blockId=\\\"textsprite_create\\\"\\n    //% blockSetVariable=\\\"textSprite\\\"\\n    //% expandableArgumentMode=\\\"toggle\\\"\\n    //% bg.defl=0\\n    //% bg.shadow=\\\"colorindexpicker\\\"\\n    //% fg.defl=1\\n    //% fg.shadow=\\\"colorindexpicker\\\"\\n    //% group=\\\"Create\\\"\\n    //% weight=100\\n    export function create(\\n        text: string,\\n        bg: number = 0,\\n        fg: number = 1,\\n    ): TextSprite {\\n        const sprite = new TextSprite(text, bg, fg, 8, 0, 0, 0, 0, 0);\\n        game.currentScene().physicsEngine.addSprite(sprite);\\n        return sprite;\\n    }\\n\\n    export function outlineOtherColor(img: Image, targetColor: number, outlineWidth: number, outlineColor: number) {\\n        let toOutlineX: number[] = [];\\n        let toOutlineY: number[] = [];\\n        for (let x = 0; x < img.width; x++) {\\n            for (let y = 0; y < img.height; y++) {\\n                for (let sx = 0; sx <= outlineWidth; sx++) {\\n                    for (let sy = 0; sy <= outlineWidth; sy++) {\\n                        if (sx + sy === 0)\\n                            continue;\\n                        if (img.getPixel(x, y) === targetColor)\\n                            continue\\n                        if (img.getPixel(x + sx, y + sy) === targetColor\\n                            || img.getPixel(x - sx, y + sy) === targetColor\\n                            || img.getPixel(x + sx, y - sy) === targetColor\\n                            || img.getPixel(x - sx, y - sy) === targetColor\\n                            ) {\\n                            toOutlineX.push(x)\\n                            toOutlineY.push(y)\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        for (let i = 0; i < toOutlineX.length; i++) {\\n            const x = toOutlineX[i]\\n            const y = toOutlineY[i]\\n            img.setPixel(x, y, outlineColor)\\n        }\\n    }\\n}\"}","pxt.json":"{\n    \"name\": \"hiohigiti\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"Color Fading\": \"github:jwunderl/pxt-color#v0.2.3\",\n        \"arcade-text\": \"github:microsoft/arcade-text#fa2439314c6633943666a763fdae32a5c67a9ae8\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"images.g.jres\",\n        \"images.g.ts\",\n        \"arcade-text.json\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v2.0.40\",\n        \"tag\": \"v2.0.40\",\n        \"commits\": \"https://github.com/microsoft/pxt-arcade/commits/e365009949b9c899fc4c9914e30e362bd22a209b\",\n        \"target\": \"2.0.40\",\n        \"pxt\": \"11.3.48\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[{"id":"10823-32927-42759-82640","timestamp":1743645019480}],"lastSaveTime":1743645644472}